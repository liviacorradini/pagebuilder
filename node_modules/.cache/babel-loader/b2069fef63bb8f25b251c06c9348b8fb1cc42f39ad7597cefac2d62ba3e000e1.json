{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\nrequire(\"core-js/modules/web.dom-exception.stack.js\");\n/*! grapesjs-parser-postcss - 1.0.1 */\n!function (e, t) {\n  'object' == typeof exports && 'object' == typeof module ? module.exports = t() : 'function' == typeof define && define.amd ? define([], t) : 'object' == typeof exports ? exports[\"grapesjs-parser-postcss\"] = t() : e[\"grapesjs-parser-postcss\"] = t();\n}('undefined' != typeof globalThis ? globalThis : 'undefined' != typeof window ? window : this, () => (() => {\n  var e = {\n      241: e => {\n        var t = String,\n          s = function () {\n            return {\n              isColorSupported: !1,\n              reset: t,\n              bold: t,\n              dim: t,\n              italic: t,\n              underline: t,\n              inverse: t,\n              hidden: t,\n              strikethrough: t,\n              black: t,\n              red: t,\n              green: t,\n              yellow: t,\n              blue: t,\n              magenta: t,\n              cyan: t,\n              white: t,\n              gray: t,\n              bgBlack: t,\n              bgRed: t,\n              bgGreen: t,\n              bgYellow: t,\n              bgBlue: t,\n              bgMagenta: t,\n              bgCyan: t,\n              bgWhite: t\n            };\n          };\n        e.exports = s(), e.exports.createColors = s;\n      },\n      353: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(19);\n        class i extends r {\n          constructor(e) {\n            super(e), this.type = 'atrule';\n          }\n          append(...e) {\n            return this.proxyOf.nodes || (this.nodes = []), super.append(...e);\n          }\n          prepend(...e) {\n            return this.proxyOf.nodes || (this.nodes = []), super.prepend(...e);\n          }\n        }\n        e.exports = i, i.default = i, r.registerAtRule(i);\n      },\n      932: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(631);\n        class i extends r {\n          constructor(e) {\n            super(e), this.type = 'comment';\n          }\n        }\n        e.exports = i, i.default = i;\n      },\n      19: (e, t, s) => {\n        \"use strict\";\n\n        let r,\n          i,\n          n,\n          {\n            isClean: o,\n            my: l\n          } = s(513),\n          a = s(258),\n          h = s(932),\n          u = s(631);\n        function c(e) {\n          return e.map(e => (e.nodes && (e.nodes = c(e.nodes)), delete e.source, e));\n        }\n        function p(e) {\n          if (e[o] = !1, e.proxyOf.nodes) for (let t of e.proxyOf.nodes) p(t);\n        }\n        class f extends u {\n          push(e) {\n            return e.parent = this, this.proxyOf.nodes.push(e), this;\n          }\n          each(e) {\n            if (!this.proxyOf.nodes) return;\n            let t,\n              s,\n              r = this.getIterator();\n            for (; this.indexes[r] < this.proxyOf.nodes.length && (t = this.indexes[r], s = e(this.proxyOf.nodes[t], t), !1 !== s);) this.indexes[r] += 1;\n            return delete this.indexes[r], s;\n          }\n          walk(e) {\n            return this.each((t, s) => {\n              let r;\n              try {\n                r = e(t, s);\n              } catch (e) {\n                throw t.addToError(e);\n              }\n              return !1 !== r && t.walk && (r = t.walk(e)), r;\n            });\n          }\n          walkDecls(e, t) {\n            return t ? e instanceof RegExp ? this.walk((s, r) => {\n              if ('decl' === s.type && e.test(s.prop)) return t(s, r);\n            }) : this.walk((s, r) => {\n              if ('decl' === s.type && s.prop === e) return t(s, r);\n            }) : (t = e, this.walk((e, s) => {\n              if ('decl' === e.type) return t(e, s);\n            }));\n          }\n          walkRules(e, t) {\n            return t ? e instanceof RegExp ? this.walk((s, r) => {\n              if ('rule' === s.type && e.test(s.selector)) return t(s, r);\n            }) : this.walk((s, r) => {\n              if ('rule' === s.type && s.selector === e) return t(s, r);\n            }) : (t = e, this.walk((e, s) => {\n              if ('rule' === e.type) return t(e, s);\n            }));\n          }\n          walkAtRules(e, t) {\n            return t ? e instanceof RegExp ? this.walk((s, r) => {\n              if ('atrule' === s.type && e.test(s.name)) return t(s, r);\n            }) : this.walk((s, r) => {\n              if ('atrule' === s.type && s.name === e) return t(s, r);\n            }) : (t = e, this.walk((e, s) => {\n              if ('atrule' === e.type) return t(e, s);\n            }));\n          }\n          walkComments(e) {\n            return this.walk((t, s) => {\n              if ('comment' === t.type) return e(t, s);\n            });\n          }\n          append(...e) {\n            for (let t of e) {\n              let e = this.normalize(t, this.last);\n              for (let t of e) this.proxyOf.nodes.push(t);\n            }\n            return this.markDirty(), this;\n          }\n          prepend(...e) {\n            e = e.reverse();\n            for (let t of e) {\n              let e = this.normalize(t, this.first, 'prepend').reverse();\n              for (let t of e) this.proxyOf.nodes.unshift(t);\n              for (let t in this.indexes) this.indexes[t] = this.indexes[t] + e.length;\n            }\n            return this.markDirty(), this;\n          }\n          cleanRaws(e) {\n            if (super.cleanRaws(e), this.nodes) for (let t of this.nodes) t.cleanRaws(e);\n          }\n          insertBefore(e, t) {\n            let s,\n              r = 0 === (e = this.index(e)) && 'prepend',\n              i = this.normalize(t, this.proxyOf.nodes[e], r).reverse();\n            for (let t of i) this.proxyOf.nodes.splice(e, 0, t);\n            for (let t in this.indexes) s = this.indexes[t], e <= s && (this.indexes[t] = s + i.length);\n            return this.markDirty(), this;\n          }\n          insertAfter(e, t) {\n            e = this.index(e);\n            let s,\n              r = this.normalize(t, this.proxyOf.nodes[e]).reverse();\n            for (let t of r) this.proxyOf.nodes.splice(e + 1, 0, t);\n            for (let t in this.indexes) s = this.indexes[t], e < s && (this.indexes[t] = s + r.length);\n            return this.markDirty(), this;\n          }\n          removeChild(e) {\n            let t;\n            e = this.index(e), this.proxyOf.nodes[e].parent = void 0, this.proxyOf.nodes.splice(e, 1);\n            for (let s in this.indexes) t = this.indexes[s], t >= e && (this.indexes[s] = t - 1);\n            return this.markDirty(), this;\n          }\n          removeAll() {\n            for (let e of this.proxyOf.nodes) e.parent = void 0;\n            return this.proxyOf.nodes = [], this.markDirty(), this;\n          }\n          replaceValues(e, t, s) {\n            return s || (s = t, t = {}), this.walkDecls(r => {\n              t.props && !t.props.includes(r.prop) || t.fast && !r.value.includes(t.fast) || (r.value = r.value.replace(e, s));\n            }), this.markDirty(), this;\n          }\n          every(e) {\n            return this.nodes.every(e);\n          }\n          some(e) {\n            return this.nodes.some(e);\n          }\n          index(e) {\n            return 'number' == typeof e ? e : (e.proxyOf && (e = e.proxyOf), this.proxyOf.nodes.indexOf(e));\n          }\n          get first() {\n            if (this.proxyOf.nodes) return this.proxyOf.nodes[0];\n          }\n          get last() {\n            if (this.proxyOf.nodes) return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n          }\n          normalize(e, t) {\n            if ('string' == typeof e) e = c(r(e).nodes);else if (Array.isArray(e)) {\n              e = e.slice(0);\n              for (let t of e) t.parent && t.parent.removeChild(t, 'ignore');\n            } else if ('root' === e.type && 'document' !== this.type) {\n              e = e.nodes.slice(0);\n              for (let t of e) t.parent && t.parent.removeChild(t, 'ignore');\n            } else if (e.type) e = [e];else if (e.prop) {\n              if (void 0 === e.value) throw new Error('Value field is missed in node creation');\n              'string' != typeof e.value && (e.value = String(e.value)), e = [new a(e)];\n            } else if (e.selector) e = [new i(e)];else if (e.name) e = [new n(e)];else {\n              if (!e.text) throw new Error('Unknown node type in node creation');\n              e = [new h(e)];\n            }\n            return e.map(e => (e[l] || f.rebuild(e), (e = e.proxyOf).parent && e.parent.removeChild(e), e[o] && p(e), void 0 === e.raws.before && t && void 0 !== t.raws.before && (e.raws.before = t.raws.before.replace(/\\S/g, '')), e.parent = this.proxyOf, e));\n          }\n          getProxyProcessor() {\n            return {\n              set: (e, t, s) => (e[t] === s || (e[t] = s, 'name' !== t && 'params' !== t && 'selector' !== t || e.markDirty()), !0),\n              get: (e, t) => 'proxyOf' === t ? e : e[t] ? 'each' === t || 'string' == typeof t && t.startsWith('walk') ? (...s) => e[t](...s.map(e => 'function' == typeof e ? (t, s) => e(t.toProxy(), s) : e)) : 'every' === t || 'some' === t ? s => e[t]((e, ...t) => s(e.toProxy(), ...t)) : 'root' === t ? () => e.root().toProxy() : 'nodes' === t ? e.nodes.map(e => e.toProxy()) : 'first' === t || 'last' === t ? e[t].toProxy() : e[t] : e[t]\n            };\n          }\n          getIterator() {\n            this.lastEach || (this.lastEach = 0), this.indexes || (this.indexes = {}), this.lastEach += 1;\n            let e = this.lastEach;\n            return this.indexes[e] = 0, e;\n          }\n        }\n        f.registerParse = e => {\n          r = e;\n        }, f.registerRule = e => {\n          i = e;\n        }, f.registerAtRule = e => {\n          n = e;\n        }, e.exports = f, f.default = f, f.rebuild = e => {\n          'atrule' === e.type ? Object.setPrototypeOf(e, n.prototype) : 'rule' === e.type ? Object.setPrototypeOf(e, i.prototype) : 'decl' === e.type ? Object.setPrototypeOf(e, a.prototype) : 'comment' === e.type && Object.setPrototypeOf(e, h.prototype), e[l] = !0, e.nodes && e.nodes.forEach(e => {\n            f.rebuild(e);\n          });\n        };\n      },\n      671: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(241),\n          i = s(868);\n        class n extends Error {\n          constructor(e, t, s, r, i, o) {\n            super(e), this.name = 'CssSyntaxError', this.reason = e, i && (this.file = i), r && (this.source = r), o && (this.plugin = o), void 0 !== t && void 0 !== s && ('number' == typeof t ? (this.line = t, this.column = s) : (this.line = t.line, this.column = t.column, this.endLine = s.line, this.endColumn = s.column)), this.setMessage(), Error.captureStackTrace && Error.captureStackTrace(this, n);\n          }\n          setMessage() {\n            this.message = this.plugin ? this.plugin + ': ' : '', this.message += this.file ? this.file : '<css input>', void 0 !== this.line && (this.message += ':' + this.line + ':' + this.column), this.message += ': ' + this.reason;\n          }\n          showSourceCode(e) {\n            if (!this.source) return '';\n            let t = this.source;\n            null == e && (e = r.isColorSupported), i && e && (t = i(t));\n            let s,\n              n,\n              o = t.split(/\\r?\\n/),\n              l = Math.max(this.line - 3, 0),\n              a = Math.min(this.line + 2, o.length),\n              h = String(a).length;\n            if (e) {\n              let {\n                bold: e,\n                red: t,\n                gray: i\n              } = r.createColors(!0);\n              s = s => e(t(s)), n = e => i(e);\n            } else s = n = e => e;\n            return o.slice(l, a).map((e, t) => {\n              let r = l + 1 + t,\n                i = ' ' + (' ' + r).slice(-h) + ' | ';\n              if (r === this.line) {\n                let t = n(i.replace(/\\d/g, ' ')) + e.slice(0, this.column - 1).replace(/[^\\t]/g, ' ');\n                return s('>') + n(i) + e + '\\n ' + t + s('^');\n              }\n              return ' ' + n(i) + e;\n            }).join('\\n');\n          }\n          toString() {\n            let e = this.showSourceCode();\n            return e && (e = '\\n\\n' + e + '\\n'), this.name + ': ' + this.message + e;\n          }\n        }\n        e.exports = n, n.default = n;\n      },\n      258: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(631);\n        class i extends r {\n          constructor(e) {\n            e && void 0 !== e.value && 'string' != typeof e.value && (e = {\n              ...e,\n              value: String(e.value)\n            }), super(e), this.type = 'decl';\n          }\n          get variable() {\n            return this.prop.startsWith('--') || '$' === this.prop[0];\n          }\n        }\n        e.exports = i, i.default = i;\n      },\n      461: (e, t, s) => {\n        \"use strict\";\n\n        let r,\n          i,\n          n = s(19);\n        class o extends n {\n          constructor(e) {\n            super({\n              type: 'document',\n              ...e\n            }), this.nodes || (this.nodes = []);\n          }\n          toResult(e = {}) {\n            return new r(new i(), this, e).stringify();\n          }\n        }\n        o.registerLazyResult = e => {\n          r = e;\n        }, o.registerProcessor = e => {\n          i = e;\n        }, e.exports = o, o.default = o;\n      },\n      250: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(258),\n          i = s(981),\n          n = s(932),\n          o = s(353),\n          l = s(995),\n          a = s(25),\n          h = s(675);\n        function u(e, t) {\n          if (Array.isArray(e)) return e.map(e => u(e));\n          let {\n            inputs: s,\n            ...c\n          } = e;\n          if (s) {\n            t = [];\n            for (let e of s) {\n              let s = {\n                ...e,\n                __proto__: l.prototype\n              };\n              s.map && (s.map = {\n                ...s.map,\n                __proto__: i.prototype\n              }), t.push(s);\n            }\n          }\n          if (c.nodes && (c.nodes = e.nodes.map(e => u(e, t))), c.source) {\n            let {\n              inputId: e,\n              ...s\n            } = c.source;\n            c.source = s, null != e && (c.source.input = t[e]);\n          }\n          if ('root' === c.type) return new a(c);\n          if ('decl' === c.type) return new r(c);\n          if ('rule' === c.type) return new h(c);\n          if ('comment' === c.type) return new n(c);\n          if ('atrule' === c.type) return new o(c);\n          throw new Error('Unknown node type: ' + e.type);\n        }\n        e.exports = u, u.default = u;\n      },\n      995: (e, t, s) => {\n        \"use strict\";\n\n        let {\n            SourceMapConsumer: r,\n            SourceMapGenerator: i\n          } = s(209),\n          {\n            fileURLToPath: n,\n            pathToFileURL: o\n          } = s(414),\n          {\n            resolve: l,\n            isAbsolute: a\n          } = s(830),\n          {\n            nanoid: h\n          } = s(961),\n          u = s(868),\n          c = s(671),\n          p = s(981),\n          f = Symbol('fromOffsetCache'),\n          d = Boolean(r && i),\n          m = Boolean(l && a);\n        class g {\n          constructor(e, t = {}) {\n            if (null == e || 'object' == typeof e && !e.toString) throw new Error(`PostCSS received ${e} instead of CSS string`);\n            if (this.css = e.toString(), '\\ufeff' === this.css[0] || '￾' === this.css[0] ? (this.hasBOM = !0, this.css = this.css.slice(1)) : this.hasBOM = !1, t.from && (!m || /^\\w+:\\/\\//.test(t.from) || a(t.from) ? this.file = t.from : this.file = l(t.from)), m && d) {\n              let e = new p(this.css, t);\n              if (e.text) {\n                this.map = e;\n                let t = e.consumer().file;\n                !this.file && t && (this.file = this.mapResolve(t));\n              }\n            }\n            this.file || (this.id = '<input css ' + h(6) + '>'), this.map && (this.map.file = this.from);\n          }\n          fromOffset(e) {\n            let t, s;\n            if (this[f]) s = this[f];else {\n              let e = this.css.split('\\n');\n              s = new Array(e.length);\n              let t = 0;\n              for (let r = 0, i = e.length; r < i; r++) s[r] = t, t += e[r].length + 1;\n              this[f] = s;\n            }\n            t = s[s.length - 1];\n            let r = 0;\n            if (e >= t) r = s.length - 1;else {\n              let t,\n                i = s.length - 2;\n              for (; r < i;) if (t = r + (i - r >> 1), e < s[t]) i = t - 1;else {\n                if (!(e >= s[t + 1])) {\n                  r = t;\n                  break;\n                }\n                r = t + 1;\n              }\n            }\n            return {\n              line: r + 1,\n              col: e - s[r] + 1\n            };\n          }\n          error(e, t, s, r = {}) {\n            let i, n, l;\n            if (t && 'object' == typeof t) {\n              let e = t,\n                r = s;\n              if ('number' == typeof t.offset) {\n                let r = this.fromOffset(e.offset);\n                t = r.line, s = r.col;\n              } else t = e.line, s = e.column;\n              if ('number' == typeof r.offset) {\n                let e = this.fromOffset(r.offset);\n                n = e.line, l = e.col;\n              } else n = r.line, l = r.column;\n            } else if (!s) {\n              let e = this.fromOffset(t);\n              t = e.line, s = e.col;\n            }\n            let a = this.origin(t, s, n, l);\n            return i = a ? new c(e, void 0 === a.endLine ? a.line : {\n              line: a.line,\n              column: a.column\n            }, void 0 === a.endLine ? a.column : {\n              line: a.endLine,\n              column: a.endColumn\n            }, a.source, a.file, r.plugin) : new c(e, void 0 === n ? t : {\n              line: t,\n              column: s\n            }, void 0 === n ? s : {\n              line: n,\n              column: l\n            }, this.css, this.file, r.plugin), i.input = {\n              line: t,\n              column: s,\n              endLine: n,\n              endColumn: l,\n              source: this.css\n            }, this.file && (o && (i.input.url = o(this.file).toString()), i.input.file = this.file), i;\n          }\n          origin(e, t, s, r) {\n            if (!this.map) return !1;\n            let i,\n              l,\n              h = this.map.consumer(),\n              u = h.originalPositionFor({\n                line: e,\n                column: t\n              });\n            if (!u.source) return !1;\n            'number' == typeof s && (i = h.originalPositionFor({\n              line: s,\n              column: r\n            })), l = a(u.source) ? o(u.source) : new URL(u.source, this.map.consumer().sourceRoot || o(this.map.mapFile));\n            let c = {\n              url: l.toString(),\n              line: u.line,\n              column: u.column,\n              endLine: i && i.line,\n              endColumn: i && i.column\n            };\n            if ('file:' === l.protocol) {\n              if (!n) throw new Error(`file: protocol is not available in this PostCSS build`);\n              c.file = n(l);\n            }\n            let p = h.sourceContentFor(u.source);\n            return p && (c.source = p), c;\n          }\n          mapResolve(e) {\n            return /^\\w+:\\/\\//.test(e) ? e : l(this.map.consumer().sourceRoot || this.map.root || '.', e);\n          }\n          get from() {\n            return this.file || this.id;\n          }\n          toJSON() {\n            let e = {};\n            for (let t of ['hasBOM', 'css', 'file', 'id']) null != this[t] && (e[t] = this[t]);\n            return this.map && (e.map = {\n              ...this.map\n            }, e.map.consumerCache && (e.map.consumerCache = void 0)), e;\n          }\n        }\n        e.exports = g, g.default = g, u && u.registerInput && u.registerInput(g);\n      },\n      939: (e, t, s) => {\n        \"use strict\";\n\n        let {\n            isClean: r,\n            my: i\n          } = s(513),\n          n = s(505),\n          o = s(88),\n          l = s(19),\n          a = s(461),\n          h = (s(448), s(632)),\n          u = s(964),\n          c = s(25);\n        const p = {\n            document: 'Document',\n            root: 'Root',\n            atrule: 'AtRule',\n            rule: 'Rule',\n            decl: 'Declaration',\n            comment: 'Comment'\n          },\n          f = {\n            postcssPlugin: !0,\n            prepare: !0,\n            Once: !0,\n            Document: !0,\n            Root: !0,\n            Declaration: !0,\n            Rule: !0,\n            AtRule: !0,\n            Comment: !0,\n            DeclarationExit: !0,\n            RuleExit: !0,\n            AtRuleExit: !0,\n            CommentExit: !0,\n            RootExit: !0,\n            DocumentExit: !0,\n            OnceExit: !0\n          },\n          d = {\n            postcssPlugin: !0,\n            prepare: !0,\n            Once: !0\n          },\n          m = 0;\n        function g(e) {\n          return 'object' == typeof e && 'function' == typeof e.then;\n        }\n        function w(e) {\n          let t = !1,\n            s = p[e.type];\n          return 'decl' === e.type ? t = e.prop.toLowerCase() : 'atrule' === e.type && (t = e.name.toLowerCase()), t && e.append ? [s, s + '-' + t, m, s + 'Exit', s + 'Exit-' + t] : t ? [s, s + '-' + t, s + 'Exit', s + 'Exit-' + t] : e.append ? [s, m, s + 'Exit'] : [s, s + 'Exit'];\n        }\n        function y(e) {\n          let t;\n          return t = 'document' === e.type ? ['Document', m, 'DocumentExit'] : 'root' === e.type ? ['Root', m, 'RootExit'] : w(e), {\n            node: e,\n            events: t,\n            eventIndex: 0,\n            visitors: [],\n            visitorIndex: 0,\n            iterator: 0\n          };\n        }\n        function x(e) {\n          return e[r] = !1, e.nodes && e.nodes.forEach(e => x(e)), e;\n        }\n        let b = {};\n        class v {\n          constructor(e, t, s) {\n            let r;\n            if (this.stringified = !1, this.processed = !1, 'object' != typeof t || null === t || 'root' !== t.type && 'document' !== t.type) {\n              if (t instanceof v || t instanceof h) r = x(t.root), t.map && (void 0 === s.map && (s.map = {}), s.map.inline || (s.map.inline = !1), s.map.prev = t.map);else {\n                let e = u;\n                s.syntax && (e = s.syntax.parse), s.parser && (e = s.parser), e.parse && (e = e.parse);\n                try {\n                  r = e(t, s);\n                } catch (e) {\n                  this.processed = !0, this.error = e;\n                }\n                r && !r[i] && l.rebuild(r);\n              }\n            } else r = x(t);\n            this.result = new h(e, r, s), this.helpers = {\n              ...b,\n              result: this.result,\n              postcss: b\n            }, this.plugins = this.processor.plugins.map(e => 'object' == typeof e && e.prepare ? {\n              ...e,\n              ...e.prepare(this.result)\n            } : e);\n          }\n          get [Symbol.toStringTag]() {\n            return 'LazyResult';\n          }\n          get processor() {\n            return this.result.processor;\n          }\n          get opts() {\n            return this.result.opts;\n          }\n          get css() {\n            return this.stringify().css;\n          }\n          get content() {\n            return this.stringify().content;\n          }\n          get map() {\n            return this.stringify().map;\n          }\n          get root() {\n            return this.sync().root;\n          }\n          get messages() {\n            return this.sync().messages;\n          }\n          warnings() {\n            return this.sync().warnings();\n          }\n          toString() {\n            return this.css;\n          }\n          then(e, t) {\n            return this.async().then(e, t);\n          }\n          catch(e) {\n            return this.async().catch(e);\n          }\n          finally(e) {\n            return this.async().then(e, e);\n          }\n          async() {\n            return this.error ? Promise.reject(this.error) : this.processed ? Promise.resolve(this.result) : (this.processing || (this.processing = this.runAsync()), this.processing);\n          }\n          sync() {\n            if (this.error) throw this.error;\n            if (this.processed) return this.result;\n            if (this.processed = !0, this.processing) throw this.getAsyncError();\n            for (let e of this.plugins) {\n              if (g(this.runOnRoot(e))) throw this.getAsyncError();\n            }\n            if (this.prepareVisitors(), this.hasListener) {\n              let e = this.result.root;\n              for (; !e[r];) e[r] = !0, this.walkSync(e);\n              if (this.listeners.OnceExit) if ('document' === e.type) for (let t of e.nodes) this.visitSync(this.listeners.OnceExit, t);else this.visitSync(this.listeners.OnceExit, e);\n            }\n            return this.result;\n          }\n          stringify() {\n            if (this.error) throw this.error;\n            if (this.stringified) return this.result;\n            this.stringified = !0, this.sync();\n            let e = this.result.opts,\n              t = o;\n            e.syntax && (t = e.syntax.stringify), e.stringifier && (t = e.stringifier), t.stringify && (t = t.stringify);\n            let s = new n(t, this.result.root, this.result.opts).generate();\n            return this.result.css = s[0], this.result.map = s[1], this.result;\n          }\n          walkSync(e) {\n            e[r] = !0;\n            let t = w(e);\n            for (let s of t) if (s === m) e.nodes && e.each(e => {\n              e[r] || this.walkSync(e);\n            });else {\n              let t = this.listeners[s];\n              if (t && this.visitSync(t, e.toProxy())) return;\n            }\n          }\n          visitSync(e, t) {\n            for (let [s, r] of e) {\n              let e;\n              this.result.lastPlugin = s;\n              try {\n                e = r(t, this.helpers);\n              } catch (e) {\n                throw this.handleError(e, t.proxyOf);\n              }\n              if ('root' !== t.type && 'document' !== t.type && !t.parent) return !0;\n              if (g(e)) throw this.getAsyncError();\n            }\n          }\n          runOnRoot(e) {\n            this.result.lastPlugin = e;\n            try {\n              if ('object' == typeof e && e.Once) {\n                if ('document' === this.result.root.type) {\n                  let t = this.result.root.nodes.map(t => e.Once(t, this.helpers));\n                  return g(t[0]) ? Promise.all(t) : t;\n                }\n                return e.Once(this.result.root, this.helpers);\n              }\n              if ('function' == typeof e) return e(this.result.root, this.result);\n            } catch (e) {\n              throw this.handleError(e);\n            }\n          }\n          getAsyncError() {\n            throw new Error('Use process(css).then(cb) to work with async plugins');\n          }\n          handleError(e, t) {\n            let s = this.result.lastPlugin;\n            try {\n              t && t.addToError(e), this.error = e, 'CssSyntaxError' !== e.name || e.plugin ? s.postcssVersion : (e.plugin = s.postcssPlugin, e.setMessage());\n            } catch (e) {\n              console && console.error && console.error(e);\n            }\n            return e;\n          }\n          async runAsync() {\n            this.plugin = 0;\n            for (let e = 0; e < this.plugins.length; e++) {\n              let t = this.plugins[e],\n                s = this.runOnRoot(t);\n              if (g(s)) try {\n                await s;\n              } catch (e) {\n                throw this.handleError(e);\n              }\n            }\n            if (this.prepareVisitors(), this.hasListener) {\n              let e = this.result.root;\n              for (; !e[r];) {\n                e[r] = !0;\n                let t = [y(e)];\n                for (; t.length > 0;) {\n                  let e = this.visitTick(t);\n                  if (g(e)) try {\n                    await e;\n                  } catch (e) {\n                    let s = t[t.length - 1].node;\n                    throw this.handleError(e, s);\n                  }\n                }\n              }\n              if (this.listeners.OnceExit) for (let [t, s] of this.listeners.OnceExit) {\n                this.result.lastPlugin = t;\n                try {\n                  if ('document' === e.type) {\n                    let t = e.nodes.map(e => s(e, this.helpers));\n                    await Promise.all(t);\n                  } else await s(e, this.helpers);\n                } catch (e) {\n                  throw this.handleError(e);\n                }\n              }\n            }\n            return this.processed = !0, this.stringify();\n          }\n          prepareVisitors() {\n            this.listeners = {};\n            let e = (e, t, s) => {\n              this.listeners[t] || (this.listeners[t] = []), this.listeners[t].push([e, s]);\n            };\n            for (let t of this.plugins) if ('object' == typeof t) for (let s in t) {\n              if (!f[s] && /^[A-Z]/.test(s)) throw new Error(`Unknown event ${s} in ${t.postcssPlugin}. ` + `Try to update PostCSS (${this.processor.version} now).`);\n              if (!d[s]) if ('object' == typeof t[s]) for (let r in t[s]) e(t, '*' === r ? s : s + '-' + r.toLowerCase(), t[s][r]);else 'function' == typeof t[s] && e(t, s, t[s]);\n            }\n            this.hasListener = Object.keys(this.listeners).length > 0;\n          }\n          visitTick(e) {\n            let t = e[e.length - 1],\n              {\n                node: s,\n                visitors: i\n              } = t;\n            if ('root' !== s.type && 'document' !== s.type && !s.parent) return void e.pop();\n            if (i.length > 0 && t.visitorIndex < i.length) {\n              let [e, r] = i[t.visitorIndex];\n              t.visitorIndex += 1, t.visitorIndex === i.length && (t.visitors = [], t.visitorIndex = 0), this.result.lastPlugin = e;\n              try {\n                return r(s.toProxy(), this.helpers);\n              } catch (e) {\n                throw this.handleError(e, s);\n              }\n            }\n            if (0 !== t.iterator) {\n              let i,\n                n = t.iterator;\n              for (; i = s.nodes[s.indexes[n]];) if (s.indexes[n] += 1, !i[r]) return i[r] = !0, void e.push(y(i));\n              t.iterator = 0, delete s.indexes[n];\n            }\n            let n = t.events;\n            for (; t.eventIndex < n.length;) {\n              let e = n[t.eventIndex];\n              if (t.eventIndex += 1, e === m) return void (s.nodes && s.nodes.length && (s[r] = !0, t.iterator = s.getIterator()));\n              if (this.listeners[e]) return void (t.visitors = this.listeners[e]);\n            }\n            e.pop();\n          }\n        }\n        v.registerPostcss = e => {\n          b = e;\n        }, e.exports = v, v.default = v, c.registerLazyResult(v), a.registerLazyResult(v);\n      },\n      715: e => {\n        \"use strict\";\n\n        let t = {\n          split(e, t, s) {\n            let r = [],\n              i = '',\n              n = !1,\n              o = 0,\n              l = !1,\n              a = !1;\n            for (let s of e) a ? a = !1 : '\\\\' === s ? a = !0 : l ? s === l && (l = !1) : '\"' === s || \"'\" === s ? l = s : '(' === s ? o += 1 : ')' === s ? o > 0 && (o -= 1) : 0 === o && t.includes(s) && (n = !0), n ? ('' !== i && r.push(i.trim()), i = '', n = !1) : i += s;\n            return (s || '' !== i) && r.push(i.trim()), r;\n          },\n          space: e => t.split(e, [' ', '\\n', '\\t']),\n          comma: e => t.split(e, [','], !0)\n        };\n        e.exports = t, t.default = t;\n      },\n      505: (e, t, s) => {\n        \"use strict\";\n\n        let {\n            SourceMapConsumer: r,\n            SourceMapGenerator: i\n          } = s(209),\n          {\n            dirname: n,\n            resolve: o,\n            relative: l,\n            sep: a\n          } = s(830),\n          {\n            pathToFileURL: h\n          } = s(414),\n          u = s(995),\n          c = Boolean(r && i),\n          p = Boolean(n && o && l && a);\n        e.exports = class {\n          constructor(e, t, s, r) {\n            this.stringify = e, this.mapOpts = s.map || {}, this.root = t, this.opts = s, this.css = r;\n          }\n          isMap() {\n            return void 0 !== this.opts.map ? !!this.opts.map : this.previous().length > 0;\n          }\n          previous() {\n            if (!this.previousMaps) if (this.previousMaps = [], this.root) this.root.walk(e => {\n              if (e.source && e.source.input.map) {\n                let t = e.source.input.map;\n                this.previousMaps.includes(t) || this.previousMaps.push(t);\n              }\n            });else {\n              let e = new u(this.css, this.opts);\n              e.map && this.previousMaps.push(e.map);\n            }\n            return this.previousMaps;\n          }\n          isInline() {\n            if (void 0 !== this.mapOpts.inline) return this.mapOpts.inline;\n            let e = this.mapOpts.annotation;\n            return (void 0 === e || !0 === e) && (!this.previous().length || this.previous().some(e => e.inline));\n          }\n          isSourcesContent() {\n            return void 0 !== this.mapOpts.sourcesContent ? this.mapOpts.sourcesContent : !this.previous().length || this.previous().some(e => e.withContent());\n          }\n          clearAnnotation() {\n            if (!1 !== this.mapOpts.annotation) if (this.root) {\n              let e;\n              for (let t = this.root.nodes.length - 1; t >= 0; t--) e = this.root.nodes[t], 'comment' === e.type && 0 === e.text.indexOf('# sourceMappingURL=') && this.root.removeChild(t);\n            } else this.css && (this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, ''));\n          }\n          setSourcesContent() {\n            let e = {};\n            if (this.root) this.root.walk(t => {\n              if (t.source) {\n                let s = t.source.input.from;\n                s && !e[s] && (e[s] = !0, this.map.setSourceContent(this.toUrl(this.path(s)), t.source.input.css));\n              }\n            });else if (this.css) {\n              let e = this.opts.from ? this.toUrl(this.path(this.opts.from)) : '<no source>';\n              this.map.setSourceContent(e, this.css);\n            }\n          }\n          applyPrevMaps() {\n            for (let e of this.previous()) {\n              let t,\n                s = this.toUrl(this.path(e.file)),\n                i = e.root || n(e.file);\n              !1 === this.mapOpts.sourcesContent ? (t = new r(e.text), t.sourcesContent && (t.sourcesContent = t.sourcesContent.map(() => null))) : t = e.consumer(), this.map.applySourceMap(t, s, this.toUrl(this.path(i)));\n            }\n          }\n          isAnnotation() {\n            return !!this.isInline() || (void 0 !== this.mapOpts.annotation ? this.mapOpts.annotation : !this.previous().length || this.previous().some(e => e.annotation));\n          }\n          toBase64(e) {\n            return Buffer ? Buffer.from(e).toString('base64') : window.btoa(unescape(encodeURIComponent(e)));\n          }\n          addAnnotation() {\n            let e;\n            e = this.isInline() ? 'data:application/json;base64,' + this.toBase64(this.map.toString()) : 'string' == typeof this.mapOpts.annotation ? this.mapOpts.annotation : 'function' == typeof this.mapOpts.annotation ? this.mapOpts.annotation(this.opts.to, this.root) : this.outputFile() + '.map';\n            let t = '\\n';\n            this.css.includes('\\r\\n') && (t = '\\r\\n'), this.css += t + '/*# sourceMappingURL=' + e + ' */';\n          }\n          outputFile() {\n            return this.opts.to ? this.path(this.opts.to) : this.opts.from ? this.path(this.opts.from) : 'to.css';\n          }\n          generateMap() {\n            if (this.root) this.generateString();else if (1 === this.previous().length) {\n              let e = this.previous()[0].consumer();\n              e.file = this.outputFile(), this.map = i.fromSourceMap(e);\n            } else this.map = new i({\n              file: this.outputFile()\n            }), this.map.addMapping({\n              source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : '<no source>',\n              generated: {\n                line: 1,\n                column: 0\n              },\n              original: {\n                line: 1,\n                column: 0\n              }\n            });\n            return this.isSourcesContent() && this.setSourcesContent(), this.root && this.previous().length > 0 && this.applyPrevMaps(), this.isAnnotation() && this.addAnnotation(), this.isInline() ? [this.css] : [this.css, this.map];\n          }\n          path(e) {\n            if (0 === e.indexOf('<')) return e;\n            if (/^\\w+:\\/\\//.test(e)) return e;\n            if (this.mapOpts.absolute) return e;\n            let t = this.opts.to ? n(this.opts.to) : '.';\n            return 'string' == typeof this.mapOpts.annotation && (t = n(o(t, this.mapOpts.annotation))), e = l(t, e);\n          }\n          toUrl(e) {\n            return '\\\\' === a && (e = e.replace(/\\\\/g, '/')), encodeURI(e).replace(/[#?]/g, encodeURIComponent);\n          }\n          sourcePath(e) {\n            if (this.mapOpts.from) return this.toUrl(this.mapOpts.from);\n            if (this.mapOpts.absolute) {\n              if (h) return h(e.source.input.from).toString();\n              throw new Error('`map.absolute` option is not available in this PostCSS build');\n            }\n            return this.toUrl(this.path(e.source.input.from));\n          }\n          generateString() {\n            this.css = '', this.map = new i({\n              file: this.outputFile()\n            });\n            let e,\n              t,\n              s = 1,\n              r = 1,\n              n = '<no source>',\n              o = {\n                source: '',\n                generated: {\n                  line: 0,\n                  column: 0\n                },\n                original: {\n                  line: 0,\n                  column: 0\n                }\n              };\n            this.stringify(this.root, (i, l, a) => {\n              if (this.css += i, l && 'end' !== a && (o.generated.line = s, o.generated.column = r - 1, l.source && l.source.start ? (o.source = this.sourcePath(l), o.original.line = l.source.start.line, o.original.column = l.source.start.column - 1, this.map.addMapping(o)) : (o.source = n, o.original.line = 1, o.original.column = 0, this.map.addMapping(o))), e = i.match(/\\n/g), e ? (s += e.length, t = i.lastIndexOf('\\n'), r = i.length - t) : r += i.length, l && 'start' !== a) {\n                let e = l.parent || {\n                  raws: {}\n                };\n                ('decl' !== l.type || l !== e.last || e.raws.semicolon) && (l.source && l.source.end ? (o.source = this.sourcePath(l), o.original.line = l.source.end.line, o.original.column = l.source.end.column - 1, o.generated.line = s, o.generated.column = r - 2, this.map.addMapping(o)) : (o.source = n, o.original.line = 1, o.original.column = 0, o.generated.line = s, o.generated.column = r - 1, this.map.addMapping(o)));\n              }\n            });\n          }\n          generate() {\n            if (this.clearAnnotation(), p && c && this.isMap()) return this.generateMap();\n            {\n              let e = '';\n              return this.stringify(this.root, t => {\n                e += t;\n              }), [e];\n            }\n          }\n        };\n      },\n      647: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(505),\n          i = s(88),\n          n = (s(448), s(964));\n        const o = s(632);\n        class l {\n          constructor(e, t, s) {\n            let n;\n            t = t.toString(), this.stringified = !1, this._processor = e, this._css = t, this._opts = s, this._map = void 0;\n            let l = i;\n            this.result = new o(this._processor, n, this._opts), this.result.css = t;\n            let a = this;\n            Object.defineProperty(this.result, 'root', {\n              get: () => a.root\n            });\n            let h = new r(l, n, this._opts, t);\n            if (h.isMap()) {\n              let [e, t] = h.generate();\n              e && (this.result.css = e), t && (this.result.map = t);\n            }\n          }\n          get [Symbol.toStringTag]() {\n            return 'NoWorkResult';\n          }\n          get processor() {\n            return this.result.processor;\n          }\n          get opts() {\n            return this.result.opts;\n          }\n          get css() {\n            return this.result.css;\n          }\n          get content() {\n            return this.result.css;\n          }\n          get map() {\n            return this.result.map;\n          }\n          get root() {\n            if (this._root) return this._root;\n            let e,\n              t = n;\n            try {\n              e = t(this._css, this._opts);\n            } catch (e) {\n              this.error = e;\n            }\n            if (this.error) throw this.error;\n            return this._root = e, e;\n          }\n          get messages() {\n            return [];\n          }\n          warnings() {\n            return [];\n          }\n          toString() {\n            return this._css;\n          }\n          then(e, t) {\n            return this.async().then(e, t);\n          }\n          catch(e) {\n            return this.async().catch(e);\n          }\n          finally(e) {\n            return this.async().then(e, e);\n          }\n          async() {\n            return this.error ? Promise.reject(this.error) : Promise.resolve(this.result);\n          }\n          sync() {\n            if (this.error) throw this.error;\n            return this.result;\n          }\n        }\n        e.exports = l, l.default = l;\n      },\n      631: (e, t, s) => {\n        \"use strict\";\n\n        let {\n            isClean: r,\n            my: i\n          } = s(513),\n          n = s(671),\n          o = s(62),\n          l = s(88);\n        function a(e, t) {\n          let s = new e.constructor();\n          for (let r in e) {\n            if (!Object.prototype.hasOwnProperty.call(e, r)) continue;\n            if ('proxyCache' === r) continue;\n            let i = e[r],\n              n = typeof i;\n            'parent' === r && 'object' === n ? t && (s[r] = t) : 'source' === r ? s[r] = i : Array.isArray(i) ? s[r] = i.map(e => a(e, s)) : ('object' === n && null !== i && (i = a(i)), s[r] = i);\n          }\n          return s;\n        }\n        class h {\n          constructor(e = {}) {\n            this.raws = {}, this[r] = !1, this[i] = !0;\n            for (let t in e) if ('nodes' === t) {\n              this.nodes = [];\n              for (let s of e[t]) 'function' == typeof s.clone ? this.append(s.clone()) : this.append(s);\n            } else this[t] = e[t];\n          }\n          error(e, t = {}) {\n            if (this.source) {\n              let {\n                start: s,\n                end: r\n              } = this.rangeBy(t);\n              return this.source.input.error(e, {\n                line: s.line,\n                column: s.column\n              }, {\n                line: r.line,\n                column: r.column\n              }, t);\n            }\n            return new n(e);\n          }\n          warn(e, t, s) {\n            let r = {\n              node: this\n            };\n            for (let e in s) r[e] = s[e];\n            return e.warn(t, r);\n          }\n          remove() {\n            return this.parent && this.parent.removeChild(this), this.parent = void 0, this;\n          }\n          toString(e = l) {\n            e.stringify && (e = e.stringify);\n            let t = '';\n            return e(this, e => {\n              t += e;\n            }), t;\n          }\n          assign(e = {}) {\n            for (let t in e) this[t] = e[t];\n            return this;\n          }\n          clone(e = {}) {\n            let t = a(this);\n            for (let s in e) t[s] = e[s];\n            return t;\n          }\n          cloneBefore(e = {}) {\n            let t = this.clone(e);\n            return this.parent.insertBefore(this, t), t;\n          }\n          cloneAfter(e = {}) {\n            let t = this.clone(e);\n            return this.parent.insertAfter(this, t), t;\n          }\n          replaceWith(...e) {\n            if (this.parent) {\n              let t = this,\n                s = !1;\n              for (let r of e) r === this ? s = !0 : s ? (this.parent.insertAfter(t, r), t = r) : this.parent.insertBefore(t, r);\n              s || this.remove();\n            }\n            return this;\n          }\n          next() {\n            if (!this.parent) return;\n            let e = this.parent.index(this);\n            return this.parent.nodes[e + 1];\n          }\n          prev() {\n            if (!this.parent) return;\n            let e = this.parent.index(this);\n            return this.parent.nodes[e - 1];\n          }\n          before(e) {\n            return this.parent.insertBefore(this, e), this;\n          }\n          after(e) {\n            return this.parent.insertAfter(this, e), this;\n          }\n          root() {\n            let e = this;\n            for (; e.parent && 'document' !== e.parent.type;) e = e.parent;\n            return e;\n          }\n          raw(e, t) {\n            return new o().raw(this, e, t);\n          }\n          cleanRaws(e) {\n            delete this.raws.before, delete this.raws.after, e || delete this.raws.between;\n          }\n          toJSON(e, t) {\n            let s = {},\n              r = null == t;\n            t = t || new Map();\n            let i = 0;\n            for (let e in this) {\n              if (!Object.prototype.hasOwnProperty.call(this, e)) continue;\n              if ('parent' === e || 'proxyCache' === e) continue;\n              let r = this[e];\n              if (Array.isArray(r)) s[e] = r.map(e => 'object' == typeof e && e.toJSON ? e.toJSON(null, t) : e);else if ('object' == typeof r && r.toJSON) s[e] = r.toJSON(null, t);else if ('source' === e) {\n                let n = t.get(r.input);\n                null == n && (n = i, t.set(r.input, i), i++), s[e] = {\n                  inputId: n,\n                  start: r.start,\n                  end: r.end\n                };\n              } else s[e] = r;\n            }\n            return r && (s.inputs = [...t.keys()].map(e => e.toJSON())), s;\n          }\n          positionInside(e) {\n            let t = this.toString(),\n              s = this.source.start.column,\n              r = this.source.start.line;\n            for (let i = 0; i < e; i++) '\\n' === t[i] ? (s = 1, r += 1) : s += 1;\n            return {\n              line: r,\n              column: s\n            };\n          }\n          positionBy(e) {\n            let t = this.source.start;\n            if (e.index) t = this.positionInside(e.index);else if (e.word) {\n              let s = this.toString().indexOf(e.word);\n              -1 !== s && (t = this.positionInside(s));\n            }\n            return t;\n          }\n          rangeBy(e) {\n            let t = {\n                line: this.source.start.line,\n                column: this.source.start.column\n              },\n              s = this.source.end ? {\n                line: this.source.end.line,\n                column: this.source.end.column + 1\n              } : {\n                line: t.line,\n                column: t.column + 1\n              };\n            if (e.word) {\n              let r = this.toString().indexOf(e.word);\n              -1 !== r && (t = this.positionInside(r), s = this.positionInside(r + e.word.length));\n            } else e.start ? t = {\n              line: e.start.line,\n              column: e.start.column\n            } : e.index && (t = this.positionInside(e.index)), e.end ? s = {\n              line: e.end.line,\n              column: e.end.column\n            } : e.endIndex ? s = this.positionInside(e.endIndex) : e.index && (s = this.positionInside(e.index + 1));\n            return (s.line < t.line || s.line === t.line && s.column <= t.column) && (s = {\n              line: t.line,\n              column: t.column + 1\n            }), {\n              start: t,\n              end: s\n            };\n          }\n          getProxyProcessor() {\n            return {\n              set: (e, t, s) => (e[t] === s || (e[t] = s, 'prop' !== t && 'value' !== t && 'name' !== t && 'params' !== t && 'important' !== t && 'text' !== t || e.markDirty()), !0),\n              get: (e, t) => 'proxyOf' === t ? e : 'root' === t ? () => e.root().toProxy() : e[t]\n            };\n          }\n          toProxy() {\n            return this.proxyCache || (this.proxyCache = new Proxy(this, this.getProxyProcessor())), this.proxyCache;\n          }\n          addToError(e) {\n            if (e.postcssNode = this, e.stack && this.source && /\\n\\s{4}at /.test(e.stack)) {\n              let t = this.source;\n              e.stack = e.stack.replace(/\\n\\s{4}at /, `$&${t.input.from}:${t.start.line}:${t.start.column}$&`);\n            }\n            return e;\n          }\n          markDirty() {\n            if (this[r]) {\n              this[r] = !1;\n              let e = this;\n              for (; e = e.parent;) e[r] = !1;\n            }\n          }\n          get proxyOf() {\n            return this;\n          }\n        }\n        e.exports = h, h.default = h;\n      },\n      964: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(19),\n          i = s(867),\n          n = s(995);\n        function o(e, t) {\n          let s = new n(e, t),\n            r = new i(s);\n          try {\n            r.parse();\n          } catch (e) {\n            throw e;\n          }\n          return r.root;\n        }\n        e.exports = o, o.default = o, r.registerParse(o);\n      },\n      867: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(258),\n          i = s(852),\n          n = s(932),\n          o = s(353),\n          l = s(25),\n          a = s(675);\n        const h = {\n          empty: !0,\n          space: !0\n        };\n        e.exports = class {\n          constructor(e) {\n            this.input = e, this.root = new l(), this.current = this.root, this.spaces = '', this.semicolon = !1, this.customProperty = !1, this.createTokenizer(), this.root.source = {\n              input: e,\n              start: {\n                offset: 0,\n                line: 1,\n                column: 1\n              }\n            };\n          }\n          createTokenizer() {\n            this.tokenizer = i(this.input);\n          }\n          parse() {\n            let e;\n            for (; !this.tokenizer.endOfFile();) switch (e = this.tokenizer.nextToken(), e[0]) {\n              case 'space':\n                this.spaces += e[1];\n                break;\n              case ';':\n                this.freeSemicolon(e);\n                break;\n              case '}':\n                this.end(e);\n                break;\n              case 'comment':\n                this.comment(e);\n                break;\n              case 'at-word':\n                this.atrule(e);\n                break;\n              case '{':\n                this.emptyRule(e);\n                break;\n              default:\n                this.other(e);\n            }\n            this.endFile();\n          }\n          comment(e) {\n            let t = new n();\n            this.init(t, e[2]), t.source.end = this.getPosition(e[3] || e[2]);\n            let s = e[1].slice(2, -2);\n            if (/^\\s*$/.test(s)) t.text = '', t.raws.left = s, t.raws.right = '';else {\n              let e = s.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n              t.text = e[2], t.raws.left = e[1], t.raws.right = e[3];\n            }\n          }\n          emptyRule(e) {\n            let t = new a();\n            this.init(t, e[2]), t.selector = '', t.raws.between = '', this.current = t;\n          }\n          other(e) {\n            let t = !1,\n              s = null,\n              r = !1,\n              i = null,\n              n = [],\n              o = e[1].startsWith('--'),\n              l = [],\n              a = e;\n            for (; a;) {\n              if (s = a[0], l.push(a), '(' === s || '[' === s) i || (i = a), n.push('(' === s ? ')' : ']');else if (o && r && '{' === s) i || (i = a), n.push('}');else if (0 === n.length) {\n                if (';' === s) {\n                  if (r) return void this.decl(l, o);\n                  break;\n                }\n                if ('{' === s) return void this.rule(l);\n                if ('}' === s) {\n                  this.tokenizer.back(l.pop()), t = !0;\n                  break;\n                }\n                ':' === s && (r = !0);\n              } else s === n[n.length - 1] && (n.pop(), 0 === n.length && (i = null));\n              a = this.tokenizer.nextToken();\n            }\n            if (this.tokenizer.endOfFile() && (t = !0), n.length > 0 && this.unclosedBracket(i), t && r) {\n              if (!o) for (; l.length && (a = l[l.length - 1][0], 'space' === a || 'comment' === a);) this.tokenizer.back(l.pop());\n              this.decl(l, o);\n            } else this.unknownWord(l);\n          }\n          rule(e) {\n            e.pop();\n            let t = new a();\n            this.init(t, e[0][2]), t.raws.between = this.spacesAndCommentsFromEnd(e), this.raw(t, 'selector', e), this.current = t;\n          }\n          decl(e, t) {\n            let s = new r();\n            this.init(s, e[0][2]);\n            let i,\n              n = e[e.length - 1];\n            for (';' === n[0] && (this.semicolon = !0, e.pop()), s.source.end = this.getPosition(n[3] || n[2] || function (e) {\n              for (let t = e.length - 1; t >= 0; t--) {\n                let s = e[t],\n                  r = s[3] || s[2];\n                if (r) return r;\n              }\n            }(e)); 'word' !== e[0][0];) 1 === e.length && this.unknownWord(e), s.raws.before += e.shift()[1];\n            for (s.source.start = this.getPosition(e[0][2]), s.prop = ''; e.length;) {\n              let t = e[0][0];\n              if (':' === t || 'space' === t || 'comment' === t) break;\n              s.prop += e.shift()[1];\n            }\n            for (s.raws.between = ''; e.length;) {\n              if (i = e.shift(), ':' === i[0]) {\n                s.raws.between += i[1];\n                break;\n              }\n              'word' === i[0] && /\\w/.test(i[1]) && this.unknownWord([i]), s.raws.between += i[1];\n            }\n            '_' !== s.prop[0] && '*' !== s.prop[0] || (s.raws.before += s.prop[0], s.prop = s.prop.slice(1));\n            let o,\n              l = [];\n            for (; e.length && (o = e[0][0], 'space' === o || 'comment' === o);) l.push(e.shift());\n            this.precheckMissedSemicolon(e);\n            for (let t = e.length - 1; t >= 0; t--) {\n              if (i = e[t], '!important' === i[1].toLowerCase()) {\n                s.important = !0;\n                let r = this.stringFrom(e, t);\n                r = this.spacesFromEnd(e) + r, ' !important' !== r && (s.raws.important = r);\n                break;\n              }\n              if ('important' === i[1].toLowerCase()) {\n                let r = e.slice(0),\n                  i = '';\n                for (let e = t; e > 0; e--) {\n                  let t = r[e][0];\n                  if (0 === i.trim().indexOf('!') && 'space' !== t) break;\n                  i = r.pop()[1] + i;\n                }\n                0 === i.trim().indexOf('!') && (s.important = !0, s.raws.important = i, e = r);\n              }\n              if ('space' !== i[0] && 'comment' !== i[0]) break;\n            }\n            e.some(e => 'space' !== e[0] && 'comment' !== e[0]) && (s.raws.between += l.map(e => e[1]).join(''), l = []), this.raw(s, 'value', l.concat(e), t), s.value.includes(':') && !t && this.checkMissedSemicolon(e);\n          }\n          atrule(e) {\n            let t,\n              s,\n              r,\n              i = new o();\n            i.name = e[1].slice(1), '' === i.name && this.unnamedAtrule(i, e), this.init(i, e[2]);\n            let n = !1,\n              l = !1,\n              a = [],\n              h = [];\n            for (; !this.tokenizer.endOfFile();) {\n              if (t = (e = this.tokenizer.nextToken())[0], '(' === t || '[' === t ? h.push('(' === t ? ')' : ']') : '{' === t && h.length > 0 ? h.push('}') : t === h[h.length - 1] && h.pop(), 0 === h.length) {\n                if (';' === t) {\n                  i.source.end = this.getPosition(e[2]), this.semicolon = !0;\n                  break;\n                }\n                if ('{' === t) {\n                  l = !0;\n                  break;\n                }\n                if ('}' === t) {\n                  if (a.length > 0) {\n                    for (r = a.length - 1, s = a[r]; s && 'space' === s[0];) s = a[--r];\n                    s && (i.source.end = this.getPosition(s[3] || s[2]));\n                  }\n                  this.end(e);\n                  break;\n                }\n                a.push(e);\n              } else a.push(e);\n              if (this.tokenizer.endOfFile()) {\n                n = !0;\n                break;\n              }\n            }\n            i.raws.between = this.spacesAndCommentsFromEnd(a), a.length ? (i.raws.afterName = this.spacesAndCommentsFromStart(a), this.raw(i, 'params', a), n && (e = a[a.length - 1], i.source.end = this.getPosition(e[3] || e[2]), this.spaces = i.raws.between, i.raws.between = '')) : (i.raws.afterName = '', i.params = ''), l && (i.nodes = [], this.current = i);\n          }\n          end(e) {\n            this.current.nodes && this.current.nodes.length && (this.current.raws.semicolon = this.semicolon), this.semicolon = !1, this.current.raws.after = (this.current.raws.after || '') + this.spaces, this.spaces = '', this.current.parent ? (this.current.source.end = this.getPosition(e[2]), this.current = this.current.parent) : this.unexpectedClose(e);\n          }\n          endFile() {\n            this.current.parent && this.unclosedBlock(), this.current.nodes && this.current.nodes.length && (this.current.raws.semicolon = this.semicolon), this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n          }\n          freeSemicolon(e) {\n            if (this.spaces += e[1], this.current.nodes) {\n              let e = this.current.nodes[this.current.nodes.length - 1];\n              e && 'rule' === e.type && !e.raws.ownSemicolon && (e.raws.ownSemicolon = this.spaces, this.spaces = '');\n            }\n          }\n          getPosition(e) {\n            let t = this.input.fromOffset(e);\n            return {\n              offset: e,\n              line: t.line,\n              column: t.col\n            };\n          }\n          init(e, t) {\n            this.current.push(e), e.source = {\n              start: this.getPosition(t),\n              input: this.input\n            }, e.raws.before = this.spaces, this.spaces = '', 'comment' !== e.type && (this.semicolon = !1);\n          }\n          raw(e, t, s, r) {\n            let i,\n              n,\n              o,\n              l,\n              a = s.length,\n              u = '',\n              c = !0;\n            for (let e = 0; e < a; e += 1) i = s[e], n = i[0], 'space' !== n || e !== a - 1 || r ? 'comment' === n ? (l = s[e - 1] ? s[e - 1][0] : 'empty', o = s[e + 1] ? s[e + 1][0] : 'empty', h[l] || h[o] || ',' === u.slice(-1) ? c = !1 : u += i[1]) : u += i[1] : c = !1;\n            if (!c) {\n              let r = s.reduce((e, t) => e + t[1], '');\n              e.raws[t] = {\n                value: u,\n                raw: r\n              };\n            }\n            e[t] = u;\n          }\n          spacesAndCommentsFromEnd(e) {\n            let t,\n              s = '';\n            for (; e.length && (t = e[e.length - 1][0], 'space' === t || 'comment' === t);) s = e.pop()[1] + s;\n            return s;\n          }\n          spacesAndCommentsFromStart(e) {\n            let t,\n              s = '';\n            for (; e.length && (t = e[0][0], 'space' === t || 'comment' === t);) s += e.shift()[1];\n            return s;\n          }\n          spacesFromEnd(e) {\n            let t,\n              s = '';\n            for (; e.length && (t = e[e.length - 1][0], 'space' === t);) s = e.pop()[1] + s;\n            return s;\n          }\n          stringFrom(e, t) {\n            let s = '';\n            for (let r = t; r < e.length; r++) s += e[r][1];\n            return e.splice(t, e.length - t), s;\n          }\n          colon(e) {\n            let t,\n              s,\n              r,\n              i = 0;\n            for (let [n, o] of e.entries()) {\n              if (t = o, s = t[0], '(' === s && (i += 1), ')' === s && (i -= 1), 0 === i && ':' === s) {\n                if (r) {\n                  if ('word' === r[0] && 'progid' === r[1]) continue;\n                  return n;\n                }\n                this.doubleColon(t);\n              }\n              r = t;\n            }\n            return !1;\n          }\n          unclosedBracket(e) {\n            throw this.input.error('Unclosed bracket', {\n              offset: e[2]\n            }, {\n              offset: e[2] + 1\n            });\n          }\n          unknownWord(e) {\n            throw this.input.error('Unknown word', {\n              offset: e[0][2]\n            }, {\n              offset: e[0][2] + e[0][1].length\n            });\n          }\n          unexpectedClose(e) {\n            throw this.input.error('Unexpected }', {\n              offset: e[2]\n            }, {\n              offset: e[2] + 1\n            });\n          }\n          unclosedBlock() {\n            let e = this.current.source.start;\n            throw this.input.error('Unclosed block', e.line, e.column);\n          }\n          doubleColon(e) {\n            throw this.input.error('Double colon', {\n              offset: e[2]\n            }, {\n              offset: e[2] + e[1].length\n            });\n          }\n          unnamedAtrule(e, t) {\n            throw this.input.error('At-rule without name', {\n              offset: t[2]\n            }, {\n              offset: t[2] + t[1].length\n            });\n          }\n          precheckMissedSemicolon() {}\n          checkMissedSemicolon(e) {\n            let t = this.colon(e);\n            if (!1 === t) return;\n            let s,\n              r = 0;\n            for (let i = t - 1; i >= 0 && (s = e[i], 'space' === s[0] || (r += 1, 2 !== r)); i--);\n            throw this.input.error('Missed semicolon', 'word' === s[0] ? s[3] + 1 : s[2]);\n          }\n        };\n      },\n      20: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(671),\n          i = s(258),\n          n = s(939),\n          o = s(19),\n          l = s(723),\n          a = s(88),\n          h = s(250),\n          u = s(461),\n          c = s(728),\n          p = s(932),\n          f = s(353),\n          d = s(632),\n          m = s(995),\n          g = s(964),\n          w = s(715),\n          y = s(675),\n          x = s(25),\n          b = s(631);\n        function v(...e) {\n          return 1 === e.length && Array.isArray(e[0]) && (e = e[0]), new l(e);\n        }\n        v.plugin = function (e, t) {\n          let s,\n            r = !1;\n          function i(...s) {\n            console && console.warn && !r && (r = !0, console.warn(e + ': postcss.plugin was deprecated. Migration guide:\\n' + 'https://evilmartians.com/chronicles/postcss-8-plugin-migration'), process.env.LANG && process.env.LANG.startsWith('cn') && console.warn(e + ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' + 'https://www.w3ctech.com/topic/2226'));\n            let i = t(...s);\n            return i.postcssPlugin = e, i.postcssVersion = new l().version, i;\n          }\n          return Object.defineProperty(i, 'postcss', {\n            get: () => (s || (s = i()), s)\n          }), i.process = function (e, t, s) {\n            return v([i(s)]).process(e, t);\n          }, i;\n        }, v.stringify = a, v.parse = g, v.fromJSON = h, v.list = w, v.comment = e => new p(e), v.atRule = e => new f(e), v.decl = e => new i(e), v.rule = e => new y(e), v.root = e => new x(e), v.document = e => new u(e), v.CssSyntaxError = r, v.Declaration = i, v.Container = o, v.Processor = l, v.Document = u, v.Comment = p, v.Warning = c, v.AtRule = f, v.Result = d, v.Input = m, v.Rule = y, v.Root = x, v.Node = b, n.registerPostcss(v), e.exports = v, v.default = v;\n      },\n      981: (e, t, s) => {\n        \"use strict\";\n\n        let {\n            SourceMapConsumer: r,\n            SourceMapGenerator: i\n          } = s(209),\n          {\n            existsSync: n,\n            readFileSync: o\n          } = s(777),\n          {\n            dirname: l,\n            join: a\n          } = s(830);\n        class h {\n          constructor(e, t) {\n            if (!1 === t.map) return;\n            this.loadAnnotation(e), this.inline = this.startWith(this.annotation, 'data:');\n            let s = t.map ? t.map.prev : void 0,\n              r = this.loadMap(t.from, s);\n            !this.mapFile && t.from && (this.mapFile = t.from), this.mapFile && (this.root = l(this.mapFile)), r && (this.text = r);\n          }\n          consumer() {\n            return this.consumerCache || (this.consumerCache = new r(this.text)), this.consumerCache;\n          }\n          withContent() {\n            return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n          }\n          startWith(e, t) {\n            return !!e && e.substr(0, t.length) === t;\n          }\n          getAnnotationURL(e) {\n            return e.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim();\n          }\n          loadAnnotation(e) {\n            let t = e.match(/\\/\\*\\s*# sourceMappingURL=/gm);\n            if (!t) return;\n            let s = e.lastIndexOf(t.pop()),\n              r = e.indexOf('*/', s);\n            s > -1 && r > -1 && (this.annotation = this.getAnnotationURL(e.substring(s, r)));\n          }\n          decodeInline(e) {\n            if (/^data:application\\/json;charset=utf-?8,/.test(e) || /^data:application\\/json,/.test(e)) return decodeURIComponent(e.substr(RegExp.lastMatch.length));\n            if (/^data:application\\/json;charset=utf-?8;base64,/.test(e) || /^data:application\\/json;base64,/.test(e)) return t = e.substr(RegExp.lastMatch.length), Buffer ? Buffer.from(t, 'base64').toString() : window.atob(t);\n            var t;\n            let s = e.match(/data:application\\/json;([^,]+),/)[1];\n            throw new Error('Unsupported source map encoding ' + s);\n          }\n          loadFile(e) {\n            if (this.root = l(e), n(e)) return this.mapFile = e, o(e, 'utf-8').toString().trim();\n          }\n          loadMap(e, t) {\n            if (!1 === t) return !1;\n            if (t) {\n              if ('string' == typeof t) return t;\n              if ('function' != typeof t) {\n                if (t instanceof r) return i.fromSourceMap(t).toString();\n                if (t instanceof i) return t.toString();\n                if (this.isMap(t)) return JSON.stringify(t);\n                throw new Error('Unsupported previous source map format: ' + t.toString());\n              }\n              {\n                let s = t(e);\n                if (s) {\n                  let e = this.loadFile(s);\n                  if (!e) throw new Error('Unable to load previous source map: ' + s.toString());\n                  return e;\n                }\n              }\n            } else {\n              if (this.inline) return this.decodeInline(this.annotation);\n              if (this.annotation) {\n                let t = this.annotation;\n                return e && (t = a(l(e), t)), this.loadFile(t);\n              }\n            }\n          }\n          isMap(e) {\n            return 'object' == typeof e && ('string' == typeof e.mappings || 'string' == typeof e._mappings || Array.isArray(e.sections));\n          }\n        }\n        e.exports = h, h.default = h;\n      },\n      723: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(647),\n          i = s(939),\n          n = s(461),\n          o = s(25);\n        class l {\n          constructor(e = []) {\n            this.version = '8.4.14', this.plugins = this.normalize(e);\n          }\n          use(e) {\n            return this.plugins = this.plugins.concat(this.normalize([e])), this;\n          }\n          process(e, t = {}) {\n            return 0 === this.plugins.length && void 0 === t.parser && void 0 === t.stringifier && void 0 === t.syntax ? new r(this, e, t) : new i(this, e, t);\n          }\n          normalize(e) {\n            let t = [];\n            for (let s of e) if (!0 === s.postcss ? s = s() : s.postcss && (s = s.postcss), 'object' == typeof s && Array.isArray(s.plugins)) t = t.concat(s.plugins);else if ('object' == typeof s && s.postcssPlugin) t.push(s);else if ('function' == typeof s) t.push(s);else if ('object' != typeof s || !s.parse && !s.stringify) throw new Error(s + ' is not a PostCSS plugin');\n            return t;\n          }\n        }\n        e.exports = l, l.default = l, o.registerProcessor(l), n.registerProcessor(l);\n      },\n      632: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(728);\n        class i {\n          constructor(e, t, s) {\n            this.processor = e, this.messages = [], this.root = t, this.opts = s, this.css = void 0, this.map = void 0;\n          }\n          toString() {\n            return this.css;\n          }\n          warn(e, t = {}) {\n            t.plugin || this.lastPlugin && this.lastPlugin.postcssPlugin && (t.plugin = this.lastPlugin.postcssPlugin);\n            let s = new r(e, t);\n            return this.messages.push(s), s;\n          }\n          warnings() {\n            return this.messages.filter(e => 'warning' === e.type);\n          }\n          get content() {\n            return this.css;\n          }\n        }\n        e.exports = i, i.default = i;\n      },\n      25: (e, t, s) => {\n        \"use strict\";\n\n        let r,\n          i,\n          n = s(19);\n        class o extends n {\n          constructor(e) {\n            super(e), this.type = 'root', this.nodes || (this.nodes = []);\n          }\n          removeChild(e, t) {\n            let s = this.index(e);\n            return !t && 0 === s && this.nodes.length > 1 && (this.nodes[1].raws.before = this.nodes[s].raws.before), super.removeChild(e);\n          }\n          normalize(e, t, s) {\n            let r = super.normalize(e);\n            if (t) if ('prepend' === s) this.nodes.length > 1 ? t.raws.before = this.nodes[1].raws.before : delete t.raws.before;else if (this.first !== t) for (let e of r) e.raws.before = t.raws.before;\n            return r;\n          }\n          toResult(e = {}) {\n            return new r(new i(), this, e).stringify();\n          }\n        }\n        o.registerLazyResult = e => {\n          r = e;\n        }, o.registerProcessor = e => {\n          i = e;\n        }, e.exports = o, o.default = o;\n      },\n      675: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(19),\n          i = s(715);\n        class n extends r {\n          constructor(e) {\n            super(e), this.type = 'rule', this.nodes || (this.nodes = []);\n          }\n          get selectors() {\n            return i.comma(this.selector);\n          }\n          set selectors(e) {\n            let t = this.selector ? this.selector.match(/,\\s*/) : null,\n              s = t ? t[0] : ',' + this.raw('between', 'beforeOpen');\n            this.selector = e.join(s);\n          }\n        }\n        e.exports = n, n.default = n, r.registerRule(n);\n      },\n      62: e => {\n        \"use strict\";\n\n        const t = {\n          colon: ': ',\n          indent: '    ',\n          beforeDecl: '\\n',\n          beforeRule: '\\n',\n          beforeOpen: ' ',\n          beforeClose: '\\n',\n          beforeComment: '\\n',\n          after: '\\n',\n          emptyBody: '',\n          commentLeft: ' ',\n          commentRight: ' ',\n          semicolon: !1\n        };\n        class s {\n          constructor(e) {\n            this.builder = e;\n          }\n          stringify(e, t) {\n            if (!this[e.type]) throw new Error('Unknown AST node type ' + e.type + '. ' + 'Maybe you need to change PostCSS stringifier.');\n            this[e.type](e, t);\n          }\n          document(e) {\n            this.body(e);\n          }\n          root(e) {\n            this.body(e), e.raws.after && this.builder(e.raws.after);\n          }\n          comment(e) {\n            let t = this.raw(e, 'left', 'commentLeft'),\n              s = this.raw(e, 'right', 'commentRight');\n            this.builder('/*' + t + e.text + s + '*/', e);\n          }\n          decl(e, t) {\n            let s = this.raw(e, 'between', 'colon'),\n              r = e.prop + s + this.rawValue(e, 'value');\n            e.important && (r += e.raws.important || ' !important'), t && (r += ';'), this.builder(r, e);\n          }\n          rule(e) {\n            this.block(e, this.rawValue(e, 'selector')), e.raws.ownSemicolon && this.builder(e.raws.ownSemicolon, e, 'end');\n          }\n          atrule(e, t) {\n            let s = '@' + e.name,\n              r = e.params ? this.rawValue(e, 'params') : '';\n            if (void 0 !== e.raws.afterName ? s += e.raws.afterName : r && (s += ' '), e.nodes) this.block(e, s + r);else {\n              let i = (e.raws.between || '') + (t ? ';' : '');\n              this.builder(s + r + i, e);\n            }\n          }\n          body(e) {\n            let t = e.nodes.length - 1;\n            for (; t > 0 && 'comment' === e.nodes[t].type;) t -= 1;\n            let s = this.raw(e, 'semicolon');\n            for (let r = 0; r < e.nodes.length; r++) {\n              let i = e.nodes[r],\n                n = this.raw(i, 'before');\n              n && this.builder(n), this.stringify(i, t !== r || s);\n            }\n          }\n          block(e, t) {\n            let s,\n              r = this.raw(e, 'between', 'beforeOpen');\n            this.builder(t + r + '{', e, 'start'), e.nodes && e.nodes.length ? (this.body(e), s = this.raw(e, 'after')) : s = this.raw(e, 'after', 'emptyBody'), s && this.builder(s), this.builder('}', e, 'end');\n          }\n          raw(e, s, r) {\n            let i;\n            if (r || (r = s), s && (i = e.raws[s], void 0 !== i)) return i;\n            let n = e.parent;\n            if ('before' === r) {\n              if (!n || 'root' === n.type && n.first === e) return '';\n              if (n && 'document' === n.type) return '';\n            }\n            if (!n) return t[r];\n            let o = e.root();\n            if (o.rawCache || (o.rawCache = {}), void 0 !== o.rawCache[r]) return o.rawCache[r];\n            if ('before' === r || 'after' === r) return this.beforeAfter(e, r);\n            {\n              let t = 'raw' + ((l = r)[0].toUpperCase() + l.slice(1));\n              this[t] ? i = this[t](o, e) : o.walk(e => {\n                if (i = e.raws[s], void 0 !== i) return !1;\n              });\n            }\n            var l;\n            return void 0 === i && (i = t[r]), o.rawCache[r] = i, i;\n          }\n          rawSemicolon(e) {\n            let t;\n            return e.walk(e => {\n              if (e.nodes && e.nodes.length && 'decl' === e.last.type && (t = e.raws.semicolon, void 0 !== t)) return !1;\n            }), t;\n          }\n          rawEmptyBody(e) {\n            let t;\n            return e.walk(e => {\n              if (e.nodes && 0 === e.nodes.length && (t = e.raws.after, void 0 !== t)) return !1;\n            }), t;\n          }\n          rawIndent(e) {\n            if (e.raws.indent) return e.raws.indent;\n            let t;\n            return e.walk(s => {\n              let r = s.parent;\n              if (r && r !== e && r.parent && r.parent === e && void 0 !== s.raws.before) {\n                let e = s.raws.before.split('\\n');\n                return t = e[e.length - 1], t = t.replace(/\\S/g, ''), !1;\n              }\n            }), t;\n          }\n          rawBeforeComment(e, t) {\n            let s;\n            return e.walkComments(e => {\n              if (void 0 !== e.raws.before) return s = e.raws.before, s.includes('\\n') && (s = s.replace(/[^\\n]+$/, '')), !1;\n            }), void 0 === s ? s = this.raw(t, null, 'beforeDecl') : s && (s = s.replace(/\\S/g, '')), s;\n          }\n          rawBeforeDecl(e, t) {\n            let s;\n            return e.walkDecls(e => {\n              if (void 0 !== e.raws.before) return s = e.raws.before, s.includes('\\n') && (s = s.replace(/[^\\n]+$/, '')), !1;\n            }), void 0 === s ? s = this.raw(t, null, 'beforeRule') : s && (s = s.replace(/\\S/g, '')), s;\n          }\n          rawBeforeRule(e) {\n            let t;\n            return e.walk(s => {\n              if (s.nodes && (s.parent !== e || e.first !== s) && void 0 !== s.raws.before) return t = s.raws.before, t.includes('\\n') && (t = t.replace(/[^\\n]+$/, '')), !1;\n            }), t && (t = t.replace(/\\S/g, '')), t;\n          }\n          rawBeforeClose(e) {\n            let t;\n            return e.walk(e => {\n              if (e.nodes && e.nodes.length > 0 && void 0 !== e.raws.after) return t = e.raws.after, t.includes('\\n') && (t = t.replace(/[^\\n]+$/, '')), !1;\n            }), t && (t = t.replace(/\\S/g, '')), t;\n          }\n          rawBeforeOpen(e) {\n            let t;\n            return e.walk(e => {\n              if ('decl' !== e.type && (t = e.raws.between, void 0 !== t)) return !1;\n            }), t;\n          }\n          rawColon(e) {\n            let t;\n            return e.walkDecls(e => {\n              if (void 0 !== e.raws.between) return t = e.raws.between.replace(/[^\\s:]/g, ''), !1;\n            }), t;\n          }\n          beforeAfter(e, t) {\n            let s;\n            s = 'decl' === e.type ? this.raw(e, null, 'beforeDecl') : 'comment' === e.type ? this.raw(e, null, 'beforeComment') : 'before' === t ? this.raw(e, null, 'beforeRule') : this.raw(e, null, 'beforeClose');\n            let r = e.parent,\n              i = 0;\n            for (; r && 'root' !== r.type;) i += 1, r = r.parent;\n            if (s.includes('\\n')) {\n              let t = this.raw(e, null, 'indent');\n              if (t.length) for (let e = 0; e < i; e++) s += t;\n            }\n            return s;\n          }\n          rawValue(e, t) {\n            let s = e[t],\n              r = e.raws[t];\n            return r && r.value === s ? r.raw : s;\n          }\n        }\n        e.exports = s, s.default = s;\n      },\n      88: (e, t, s) => {\n        \"use strict\";\n\n        let r = s(62);\n        function i(e, t) {\n          new r(t).stringify(e);\n        }\n        e.exports = i, i.default = i;\n      },\n      513: e => {\n        \"use strict\";\n\n        e.exports.isClean = Symbol('isClean'), e.exports.my = Symbol('my');\n      },\n      852: e => {\n        \"use strict\";\n\n        const t = \"'\".charCodeAt(0),\n          s = '\"'.charCodeAt(0),\n          r = '\\\\'.charCodeAt(0),\n          i = '/'.charCodeAt(0),\n          n = '\\n'.charCodeAt(0),\n          o = ' '.charCodeAt(0),\n          l = '\\f'.charCodeAt(0),\n          a = '\\t'.charCodeAt(0),\n          h = '\\r'.charCodeAt(0),\n          u = '['.charCodeAt(0),\n          c = ']'.charCodeAt(0),\n          p = '('.charCodeAt(0),\n          f = ')'.charCodeAt(0),\n          d = '{'.charCodeAt(0),\n          m = '}'.charCodeAt(0),\n          g = ';'.charCodeAt(0),\n          w = '*'.charCodeAt(0),\n          y = ':'.charCodeAt(0),\n          x = '@'.charCodeAt(0),\n          b = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g,\n          v = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g,\n          C = /.[\\n\"'(/\\\\]/,\n          O = /[\\da-f]/i;\n        e.exports = function (e, k = {}) {\n          let S,\n            A,\n            P,\n            R,\n            E,\n            M,\n            I,\n            j,\n            U,\n            B,\n            F = e.css.valueOf(),\n            L = k.ignoreErrors,\n            D = F.length,\n            z = 0,\n            _ = [],\n            T = [];\n          function N(t) {\n            throw e.error('Unclosed ' + t, z);\n          }\n          return {\n            back: function (e) {\n              T.push(e);\n            },\n            nextToken: function (e) {\n              if (T.length) return T.pop();\n              if (z >= D) return;\n              let k = !!e && e.ignoreUnclosed;\n              switch (S = F.charCodeAt(z), S) {\n                case n:\n                case o:\n                case a:\n                case h:\n                case l:\n                  A = z;\n                  do {\n                    A += 1, S = F.charCodeAt(A);\n                  } while (S === o || S === n || S === a || S === h || S === l);\n                  B = ['space', F.slice(z, A)], z = A - 1;\n                  break;\n                case u:\n                case c:\n                case d:\n                case m:\n                case y:\n                case g:\n                case f:\n                  {\n                    let e = String.fromCharCode(S);\n                    B = [e, e, z];\n                    break;\n                  }\n                case p:\n                  if (j = _.length ? _.pop()[1] : '', U = F.charCodeAt(z + 1), 'url' === j && U !== t && U !== s && U !== o && U !== n && U !== a && U !== l && U !== h) {\n                    A = z;\n                    do {\n                      if (M = !1, A = F.indexOf(')', A + 1), -1 === A) {\n                        if (L || k) {\n                          A = z;\n                          break;\n                        }\n                        N('bracket');\n                      }\n                      for (I = A; F.charCodeAt(I - 1) === r;) I -= 1, M = !M;\n                    } while (M);\n                    B = ['brackets', F.slice(z, A + 1), z, A], z = A;\n                  } else A = F.indexOf(')', z + 1), R = F.slice(z, A + 1), -1 === A || C.test(R) ? B = ['(', '(', z] : (B = ['brackets', R, z, A], z = A);\n                  break;\n                case t:\n                case s:\n                  P = S === t ? \"'\" : '\"', A = z;\n                  do {\n                    if (M = !1, A = F.indexOf(P, A + 1), -1 === A) {\n                      if (L || k) {\n                        A = z + 1;\n                        break;\n                      }\n                      N('string');\n                    }\n                    for (I = A; F.charCodeAt(I - 1) === r;) I -= 1, M = !M;\n                  } while (M);\n                  B = ['string', F.slice(z, A + 1), z, A], z = A;\n                  break;\n                case x:\n                  b.lastIndex = z + 1, b.test(F), A = 0 === b.lastIndex ? F.length - 1 : b.lastIndex - 2, B = ['at-word', F.slice(z, A + 1), z, A], z = A;\n                  break;\n                case r:\n                  for (A = z, E = !0; F.charCodeAt(A + 1) === r;) A += 1, E = !E;\n                  if (S = F.charCodeAt(A + 1), E && S !== i && S !== o && S !== n && S !== a && S !== h && S !== l && (A += 1, O.test(F.charAt(A)))) {\n                    for (; O.test(F.charAt(A + 1));) A += 1;\n                    F.charCodeAt(A + 1) === o && (A += 1);\n                  }\n                  B = ['word', F.slice(z, A + 1), z, A], z = A;\n                  break;\n                default:\n                  S === i && F.charCodeAt(z + 1) === w ? (A = F.indexOf('*/', z + 2) + 1, 0 === A && (L || k ? A = F.length : N('comment')), B = ['comment', F.slice(z, A + 1), z, A], z = A) : (v.lastIndex = z + 1, v.test(F), A = 0 === v.lastIndex ? F.length - 1 : v.lastIndex - 2, B = ['word', F.slice(z, A + 1), z, A], _.push(B), z = A);\n              }\n              return z++, B;\n            },\n            endOfFile: function () {\n              return 0 === T.length && z >= D;\n            },\n            position: function () {\n              return z;\n            }\n          };\n        };\n      },\n      448: e => {\n        \"use strict\";\n\n        let t = {};\n        e.exports = function (e) {\n          t[e] || (t[e] = !0, 'undefined' != typeof console && console.warn && console.warn(e));\n        };\n      },\n      728: e => {\n        \"use strict\";\n\n        class t {\n          constructor(e, t = {}) {\n            if (this.type = 'warning', this.text = e, t.node && t.node.source) {\n              let e = t.node.rangeBy(t);\n              this.line = e.start.line, this.column = e.start.column, this.endLine = e.end.line, this.endColumn = e.end.column;\n            }\n            for (let e in t) this[e] = t[e];\n          }\n          toString() {\n            return this.node ? this.node.error(this.text, {\n              plugin: this.plugin,\n              index: this.index,\n              word: this.word\n            }).message : this.plugin ? this.plugin + ': ' + this.text : this.text;\n          }\n        }\n        e.exports = t, t.default = t;\n      },\n      868: () => {},\n      777: () => {},\n      830: () => {},\n      209: () => {},\n      414: () => {},\n      961: e => {\n        let t = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\n        e.exports = {\n          nanoid: (e = 21) => {\n            let s = '',\n              r = e;\n            for (; r--;) s += t[64 * Math.random() | 0];\n            return s;\n          },\n          customAlphabet: (e, t = 21) => (s = t) => {\n            let r = '',\n              i = s;\n            for (; i--;) r += e[Math.random() * e.length | 0];\n            return r;\n          }\n        };\n      }\n    },\n    t = {};\n  function s(r) {\n    var i = t[r];\n    if (void 0 !== i) return i.exports;\n    var n = t[r] = {\n      exports: {}\n    };\n    return e[r](n, n.exports, s), n.exports;\n  }\n  s.d = (e, t) => {\n    for (var r in t) s.o(t, r) && !s.o(e, r) && Object.defineProperty(e, r, {\n      enumerable: !0,\n      get: t[r]\n    });\n  }, s.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), s.r = e => {\n    'undefined' != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n      value: 'Module'\n    }), Object.defineProperty(e, '__esModule', {\n      value: !0\n    });\n  };\n  var r = {};\n  return (() => {\n    \"use strict\";\n\n    s.r(r), s.d(r, {\n      default: () => a\n    });\n    var e = s(20);\n    const t = e;\n    e.stringify, e.fromJSON, e.plugin, e.parse, e.list, e.document, e.comment, e.atRule, e.rule, e.decl, e.root, e.CssSyntaxError, e.Declaration, e.Container, e.Processor, e.Document, e.Comment, e.Warning, e.AtRule, e.Result, e.Input, e.Rule, e.Root, e.Node;\n    var i = void 0 && (void 0).__assign || function () {\n        return i = Object.assign || function (e) {\n          for (var t, s = 1, r = arguments.length; s < r; s++) for (var i in t = arguments[s]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n          return e;\n        }, i.apply(this, arguments);\n      },\n      n = function (e, t) {\n        return e && e.log(t, {\n          ns: 'parser-poscss'\n        });\n      },\n      o = function (e) {\n        var t = e.nodes || [],\n          s = {};\n        return t.forEach(function (e) {\n          var t = e.prop,\n            r = e.value,\n            i = e.important;\n          s[t] = r + (i ? ' !important' : '');\n        }), {\n          selectors: e.selector || '',\n          style: s\n        };\n      };\n    const l = function (e, s) {\n      var r = [];\n      n(s, ['Input CSS', e]);\n      var l = t().process(e).sync().root;\n      return n(s, ['PostCSS AST', l]), l.nodes.forEach(function (e) {\n        switch (e.type) {\n          case 'rule':\n            r.push(o(e));\n            break;\n          case 'atrule':\n            !function (e, t) {\n              var s = e.name,\n                r = e.params;\n              ['media', 'keyframes'].indexOf(s) >= 0 ? e.nodes.forEach(function (e) {\n                t.push(i(i({}, o(e)), {\n                  atRule: s,\n                  params: r\n                }));\n              }) : t.push(i(i({}, o(e)), {\n                atRule: s\n              }));\n            }(e, r);\n        }\n      }), n(s, ['Output', r]), r;\n    };\n    const a = function (e) {\n      e.setCustomParserCss(l);\n    };\n  })(), r;\n})());","map":{"version":3,"mappings":"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","names":["root","factory","exports","module","define","amd","globalThis","window","this","x","String","create","isColorSupported","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","black","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","createColors","Container","s","AtRule","constructor","defaults","super","type","append","children","proxyOf","nodes","prepend","default","registerAtRule","Node","Comment","parse","Rule","isClean","my","Declaration","cleanSource","map","i","source","markDirtyUp","node","push","child","parent","each","callback","index","result","iterator","getIterator","indexes","length","walk","e","addToError","walkDecls","prop","RegExp","test","walkRules","selector","walkAtRules","name","walkComments","normalize","last","markDirty","reverse","first","unshift","id","cleanRaws","keepBetween","insertBefore","exist","add","splice","insertAfter","removeChild","undefined","removeAll","replaceValues","pattern","opts","decl","props","includes","fast","value","replace","every","condition","some","indexOf","sample","Array","isArray","slice","Error","text","rebuild","raws","before","getProxyProcessor","set","get","startsWith","args","toProxy","cb","other","lastEach","registerParse","dependant","registerRule","Object","setPrototypeOf","prototype","forEach","pico","terminalHighlight","CssSyntaxError","message","line","column","file","plugin","reason","endLine","endColumn","setMessage","captureStackTrace","showSourceCode","color","css","mark","aside","lines","split","start","Math","max","end","min","maxWidth","str","number","gutter","spacing","join","toString","code","variable","LazyResult","Processor","Document","toResult","stringify","registerLazyResult","registerProcessor","PreviousMap","Input","Root","fromJSON","json","inputs","n","ownInputs","input","inputHydrated","__proto__","inputId","SourceMapConsumer","SourceMapGenerator","fileURLToPath","pathToFileURL","resolve","isAbsolute","nanoid","fromOffsetCache","Symbol","sourceMapAvailable","Boolean","pathAvailable","hasBOM","from","consumer","mapResolve","fromOffset","offset","lastLine","lineToIndex","prevIndex","l","mid","col","error","pos","origin","url","to","fromUrl","originalPositionFor","URL","sourceRoot","mapFile","protocol","sourceContentFor","toJSON","consumerCache","registerInput","MapGenerator","Result","TYPE_TO_CLASS_NAME","document","atrule","rule","comment","PLUGIN_PROPS","postcssPlugin","prepare","Once","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","DocumentExit","OnceExit","NOT_VISITORS","CHILDREN","isPromise","obj","then","getEvents","key","toLowerCase","toStack","events","eventIndex","visitors","visitorIndex","cleanMarks","postcss","processor","stringified","processed","inline","prev","parser","syntax","helpers","plugins","toStringTag","content","sync","messages","warnings","onFulfilled","onRejected","async","catch","finally","onFinally","Promise","reject","processing","runAsync","getAsyncError","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","subRoot","visitSync","stringifier","data","generate","event","visitor","promise","lastPlugin","handleError","roots","all","postcssVersion","err","console","stack","visitTick","version","filter","keys","visit","pop","registerPostcss","list","string","separators","array","current","func","quote","escape","letter","trim","space","comma","dirname","relative","sep","cssString","mapOpts","isMap","previous","previousMaps","isInline","annotation","isSourcesContent","sourcesContent","withContent","clearAnnotation","setSourcesContent","already","setSourceContent","toUrl","path","applyPrevMaps","applySourceMap","isAnnotation","toBase64","Buffer","btoa","unescape","encodeURIComponent","addAnnotation","outputFile","eol","generateMap","generateString","fromSourceMap","addMapping","generated","original","absolute","encodeURI","sourcePath","noSource","mapping","match","lastIndexOf","p","semicolon","NoWorkResult","_processor","_css","_opts","_map","self","defineProperty","generatedCSS","generatedMap","_root","Stringifier","cloneNode","cloned","hasOwnProperty","call","j","clone","rangeBy","warn","remove","assign","overrides","cloneBefore","cloneAfter","replaceWith","bookmark","foundSelf","next","after","raw","defaultType","between","_","fixed","emitInputs","Map","inputsNextIndex","positionInside","positionBy","word","endIndex","proxyCache","Proxy","postcssNode","Parser","tokenizer","SAFE_COMMENT_NEIGHBOR","empty","spaces","customProperty","createTokenizer","token","endOfFile","nextToken","freeSemicolon","emptyRule","endFile","init","getPosition","left","right","colon","bracket","brackets","tokens","back","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","findLastWithPosition","shift","firstSpaces","precheckMissedSemicolon","important","stringFrom","spacesFromEnd","cache","concat","checkMissedSemicolon","unnamedAtrule","open","params","afterName","spacesAndCommentsFromStart","unexpectedClose","unclosedBlock","ownSemicolon","clean","reduce","lastTokenType","element","entries","doubleColon","founded","Warning","initializer","warningPrinted","creator","process","env","LANG","transformer","processOpts","pluginOpts","atRule","existsSync","readFileSync","loadAnnotation","startWith","loadMap","substr","getAnnotationURL","sourceMapString","comments","substring","decodeInline","decodeURIComponent","lastMatch","atob","encoding","loadFile","JSON","prevPath","mappings","_mappings","sections","use","normalized","warning","ignore","selectors","values","DEFAULT_RAW","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","emptyBody","commentLeft","commentRight","builder","body","rawValue","block","own","detect","rawCache","beforeAfter","method","toUpperCase","rawSemicolon","rawEmptyBody","rawIndent","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","buf","depth","step","SINGLE_QUOTE","charCodeAt","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","options","escaped","escapePos","currentToken","valueOf","ignoreErrors","buffer","returned","unclosed","what","ignoreUnclosed","controlChar","fromCharCode","lastIndex","charAt","position","printed","range","opt","urlAlphabet","size","random","customAlphabet","alphabet","defaultSize","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","enumerable","r","log","editor","msg","ns","createRule","declarations","style","ast","t","createAtRule","setCustomParserCss"],"sourceRoot":"","sources":["webpack://grapesjs-parser-postcss/webpack/universalModuleDefinition","webpack://grapesjs-parser-postcss/node_modules/picocolors/picocolors.browser.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/at-rule.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/comment.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/container.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/css-syntax-error.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/declaration.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/document.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/fromJSON.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/input.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/lazy-result.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/list.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/map-generator.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/no-work-result.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/node.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/parse.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/parser.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/postcss.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/previous-map.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/processor.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/result.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/root.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/rule.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/stringifier.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/stringify.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/symbols.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/tokenize.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/warn-once.js","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/warning.js","webpack://grapesjs-parser-postcss/node_modules/nanoid/non-secure/index.cjs","webpack://grapesjs-parser-postcss/webpack/bootstrap","webpack://grapesjs-parser-postcss/webpack/runtime/define property getters","webpack://grapesjs-parser-postcss/webpack/runtime/hasOwnProperty shorthand","webpack://grapesjs-parser-postcss/webpack/runtime/make namespace object","webpack://grapesjs-parser-postcss/node_modules/postcss/lib/postcss.mjs","webpack://grapesjs-parser-postcss/src/parser.ts","webpack://grapesjs-parser-postcss/src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-parser-postcss\"] = factory();\n\telse\n\t\troot[\"grapesjs-parser-postcss\"] = factory();\n})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this), () => {\nreturn ","var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n","'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n","'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n","'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let quote = false\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (quote) {\n        if (letter === quote) {\n          quote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        quote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            this.map.setSourceContent(\n              this.toUrl(this.path(from)),\n              node.source.input.css\n            )\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString()\n      } else {\n        throw new Error(\n          '`map.absolute` option is not available in this PostCSS build'\n        )\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n","'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n","'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n","'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.14'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n","'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n","'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n","'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n","'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nmodule.exports = { nanoid, customAlphabet }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n","import type grapesjs from 'grapesjs';\nimport postcss, { Rule, AtRule, Declaration } from 'postcss';\n\nexport type ParsedRule = {\n  selectors: string;\n  style: Record<string, string>;\n  atRule?: string;\n  params?: string;\n}\n\ntype Editor = grapesjs.Editor;\n\n/**\n * Log stuff\n * @param  {Editor} editor\n * @param  {*} msg\n */\nexport const log = (editor: Editor, msg: any) =>\n  editor && editor.log(msg, { ns: 'parser-poscss' });\n\n/**\n * Create rule from node\n * @param  {Object} node\n * @return {Object}\n */\nexport const createRule = (node: Rule): ParsedRule => {\n  const declarations = (node.nodes as Declaration[]) || [];\n  const style: Record<string, string> = {};\n\n  declarations.forEach(({ prop, value, important }) => {\n    style[prop] = value + (important ? ' !important' : '');\n  });\n\n  return {\n    selectors: node.selector || '',\n    style,\n  }\n};\n\n/**\n * Create at rule from node\n * @param  {Object} node\n * @param  {Array<Object>} result\n * @return {Object}\n */\nexport const createAtRule = (node: AtRule, result: ParsedRule[]) => {\n  const { name, params } = node;\n  const isNested = ['media', 'keyframes'].indexOf(name) >= 0;\n\n  if (isNested) {\n    node.nodes.forEach(node => {\n      result.push({\n        ...createRule(node as Rule),\n        atRule: name,\n        params,\n      })\n    });\n  } else {\n    result.push({\n      // @ts-ignore\n      ...createRule(node as Rule),\n      atRule: name,\n    })\n  }\n};\n\nexport default (css: string, editor: Editor) => {\n  const result: ParsedRule[] = [];\n  log(editor, ['Input CSS', css]);\n\n  const ast = postcss().process(css).sync().root;\n  log(editor, ['PostCSS AST', ast]);\n\n  ast.nodes.forEach(node => {\n    const { type } = node;\n\n    switch (type) {\n      case 'rule':\n        result.push(createRule(node));\n        break;\n      case 'atrule':\n        createAtRule(node, result);\n        break;\n    }\n  });\n\n  log(editor, ['Output', result]);\n\n  return result;\n}\n","import type grapesjs from 'grapesjs';\nimport parser from './parser';\n\nconst plugin: grapesjs.Plugin = (editor) => {\n  editor.setCustomParserCss(parser);\n};\n\nexport default plugin;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}