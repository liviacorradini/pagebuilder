{"ast":null,"code":"require(\"core-js/modules/es.array.unshift.js\");\n/*! grapesjs-custom-code - 1.0.1 */\n!function (e, t) {\n  'object' == typeof exports && 'object' == typeof module ? module.exports = t() : 'function' == typeof define && define.amd ? define([], t) : 'object' == typeof exports ? exports[\"grapesjs-custom-code\"] = t() : e[\"grapesjs-custom-code\"] = t();\n}('undefined' != typeof globalThis ? globalThis : 'undefined' != typeof window ? window : this, () => (() => {\n  \"use strict\";\n\n  var e = {\n      d: (t, o) => {\n        for (var n in o) e.o(o, n) && !e.o(t, n) && Object.defineProperty(t, n, {\n          enumerable: !0,\n          get: o[n]\n        });\n      },\n      o: (e, t) => Object.prototype.hasOwnProperty.call(e, t),\n      r: e => {\n        'undefined' != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n          value: 'Module'\n        }), Object.defineProperty(e, '__esModule', {\n          value: !0\n        });\n      }\n    },\n    t = {};\n  e.r(t), e.d(t, {\n    default: () => d\n  });\n  var o = 'custom-code-plugin__code',\n    n = 'custom-code',\n    i = 'custom-code:open-modal',\n    r = void 0 && (void 0).__assign || function () {\n      return r = Object.assign || function (e) {\n        for (var t, o = 1, n = arguments.length; o < n; o++) for (var i in t = arguments[o]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n        return e;\n      }, r.apply(this, arguments);\n    };\n  var s = void 0 && (void 0).__assign || function () {\n    return s = Object.assign || function (e) {\n      for (var t, o = 1, n = arguments.length; o < n; o++) for (var i in t = arguments[o]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n      return e;\n    }, s.apply(this, arguments);\n  };\n  var a = void 0 && (void 0).__assign || function () {\n    return a = Object.assign || function (e) {\n      for (var t, o = 1, n = arguments.length; o < n; o++) for (var i in t = arguments[o]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n      return e;\n    }, a.apply(this, arguments);\n  };\n  var c = void 0 && (void 0).__assign || function () {\n    return c = Object.assign || function (e) {\n      for (var t, o = 1, n = arguments.length; o < n; o++) for (var i in t = arguments[o]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n      return e;\n    }, c.apply(this, arguments);\n  };\n  const d = function (e, t) {\n    void 0 === t && (t = {});\n    var d = c({\n      blockCustomCode: {},\n      propsCustomCode: {},\n      toolbarBtnCustomCode: {},\n      placeholderScript: \"<div style=\\\"pointer-events: none; padding: 10px;\\\">\\n      <svg viewBox=\\\"0 0 24 24\\\" style=\\\"height: 30px; vertical-align: middle;\\\">\\n        <path d=\\\"M13 14h-2v-4h2m0 8h-2v-2h2M1 21h22L12 2 1 21z\\\"></path>\\n        </svg>\\n      Custom code with <i>&lt;script&gt;</i> can't be rendered on the canvas\\n    </div>\",\n      modalTitle: 'Insert your code',\n      codeViewOptions: {},\n      buttonLabel: 'Save',\n      commandCustomCode: {}\n    }, t);\n    !function (e, t) {\n      void 0 === t && (t = {});\n      var s,\n        a = e.Components,\n        c = t.toolbarBtnCustomCode;\n      a.addType('script', {\n        view: {\n          onRender: function () {\n            var e = this.model,\n              t = this.el;\n            e.closestType(n) && (t.innerHTML = '');\n          }\n        }\n      }), a.addType(n, {\n        model: {\n          defaults: r({\n            name: 'Custom Code',\n            editable: !0,\n            components: {\n              tagName: 'span',\n              components: {\n                type: 'textnode',\n                content: 'Insert here your custom code'\n              }\n            }\n          }, t.propsCustomCode),\n          init: function () {\n            this.on(\"change:\".concat(o), this.onCustomCodeChange);\n            var e = this.get(o);\n            !this.components().length && this.components(e);\n            var t = this.get('toolbar'),\n              n = 'custom-code';\n            c && !t.filter(function (e) {\n              return e.id === n;\n            }).length && t.unshift(r({\n              id: n,\n              command: i,\n              label: \"<svg viewBox=\\\"0 0 24 24\\\">\\n              <path d=\\\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\\\"></path>\\n            </svg>\"\n            }, c));\n          },\n          onCustomCodeChange: function () {\n            this.components(this.get(o));\n          }\n        },\n        view: {\n          events: {\n            dblclick: 'onActive'\n          },\n          init: function () {\n            this.listenTo(this.model.components(), 'add remove reset', this.onComponentsChange), this.onComponentsChange();\n          },\n          onComponentsChange: function () {\n            var e = this;\n            s && clearInterval(s), s = setTimeout(function () {\n              var n = e,\n                i = n.model,\n                r = n.el,\n                s = !0;\n              (i.get(o) || '').indexOf('<script') >= 0 && t.placeholderScript && (r.innerHTML = t.placeholderScript, s = !1), i.set({\n                droppable: s\n              });\n            }, 0);\n          },\n          onActive: function () {\n            var e = this.model;\n            this.em.get('Commands').run(i, {\n              target: e\n            });\n          }\n        }\n      });\n    }(e, d), function (e, t) {\n      var o = (void 0 === t ? {} : t).blockCustomCode,\n        i = e.Blocks;\n      o && i.add(n, s({\n        label: 'Custom Code',\n        media: \"\\n      <svg viewBox=\\\"0 0 24 24\\\">\\n        <path d=\\\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\\\"></path>\\n      </svg>\\n    \",\n        category: 'Extra',\n        activate: !0,\n        select: !0,\n        content: {\n          type: n\n        }\n      }, o));\n    }(e, d), function (e, t) {\n      void 0 === t && (t = {});\n      var n = t.modalTitle,\n        r = t.codeViewOptions,\n        s = t.commandCustomCode,\n        c = function (e, t) {\n          t instanceof HTMLElement ? e.appendChild(t) : t && e.insertAdjacentHTML('beforeend', t);\n        };\n      e.Commands.add(i, a({\n        keyCustomCode: o,\n        run: function (e, t, o) {\n          void 0 === o && (o = {});\n          var n = o.target || e.getSelected();\n          this.target = n, (null == n ? void 0 : n.get('editable')) && this.showCustomCode(n, o);\n        },\n        stop: function (e) {\n          e.Modal.close();\n        },\n        showCustomCode: function (t, r) {\n          var s = r.title || n,\n            a = t.get(o) || '',\n            c = this.getContent();\n          e.Modal.open({\n            title: s,\n            content: c\n          }).onceClose(function () {\n            return e.stopCommand(i);\n          }), this.getCodeViewer().setContent(a);\n        },\n        getPreContent: function () {},\n        getPostContent: function () {},\n        getContent: function () {\n          var t = this.getCodeViewer(),\n            o = document.createElement('div'),\n            n = e.getConfig('stylePrefix');\n          return o.className = \"\".concat(n, \"custom-code\"), c(o, this.getPreContent()), o.appendChild(t.getElement()), c(o, this.getPostContent()), c(o, this.getContentActions()), t.refresh(), setTimeout(function () {\n            return t.focus();\n          }, 0), o;\n        },\n        getContentActions: function () {\n          var o = this,\n            n = document.createElement('button');\n          n.setAttribute('type', 'button');\n          var i = e.getConfig('stylePrefix');\n          return n.innerHTML = t.buttonLabel, n.className = \"\".concat(i, \"btn-prim \").concat(i, \"btn-import__custom-code\"), n.onclick = function () {\n            return o.handleSave();\n          }, n;\n        },\n        handleSave: function () {\n          var t = this.target,\n            n = this.getCodeViewer().getContent();\n          t.set(o, n), e.Modal.close();\n        },\n        getCodeViewer: function () {\n          return this.codeViewer || (this.codeViewer = e.CodeManager.createViewer(a({\n            codeName: 'htmlmixed',\n            theme: 'hopscotch',\n            readOnly: 0\n          }, r))), this.codeViewer;\n        }\n      }, s));\n    }(e, d);\n  };\n  return t;\n})());","map":{"version":3,"mappings":"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","names":["root","factory","exports","module","define","amd","globalThis","window","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","keyCustomCode","typeCustomCode","commandNameCustomCode","editor","opts","options","c","blockCustomCode","propsCustomCode","toolbarBtnCustomCode","placeholderScript","modalTitle","codeViewOptions","buttonLabel","commandCustomCode","timedInterval","Components","addType","view","onRender","model","el","closestType","innerHTML","defaults","r","name","editable","components","tagName","type","content","init","on","onCustomCodeChange","initialCode","length","toolbar","id","filter","unshift","n","command","label","events","dblclick","listenTo","onComponentsChange","clearInterval","setTimeout","e","droppable","indexOf","set","s","onActive","em","run","target","t","Blocks","add","media","category","activate","select","appendToContent","HTMLElement","appendChild","insertAdjacentHTML","Commands","a","getSelected","showCustomCode","stop","Modal","close","title","code","getContent","open","onceClose","stopCommand","getCodeViewer","setContent","getPreContent","getPostContent","codeViewer","document","createElement","pfx","getConfig","className","getElement","getContentActions","refresh","focus","btn","setAttribute","onclick","handleSave","CodeManager","createViewer","codeName","theme","readOnly"],"sourceRoot":"","sources":["webpack://grapesjs-custom-code/webpack/universalModuleDefinition","webpack://grapesjs-custom-code/webpack/bootstrap","webpack://grapesjs-custom-code/webpack/runtime/define property getters","webpack://grapesjs-custom-code/webpack/runtime/hasOwnProperty shorthand","webpack://grapesjs-custom-code/webpack/runtime/make namespace object","webpack://grapesjs-custom-code/src/utils.ts","webpack://grapesjs-custom-code/src/index.ts","webpack://grapesjs-custom-code/src/components.ts","webpack://grapesjs-custom-code/src/blocks.ts","webpack://grapesjs-custom-code/src/commands.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-custom-code\"] = factory();\n\telse\n\t\troot[\"grapesjs-custom-code\"] = factory();\n})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const keyCustomCode = 'custom-code-plugin__code';\nexport const typeCustomCode = 'custom-code';\nexport const commandNameCustomCode = 'custom-code:open-modal';","import type grapesjs from 'grapesjs';\nimport loadComponents from './components';\nimport loadBlocks from './blocks';\nimport loadCommands from './commands';\n\nexport type PluginOptions = {\n  /**\n   * Object to extend the default custom code block. Pass a falsy value to avoid adding the block\n   * @example\n   * { label: 'Custom Code', category: 'Extra', ... }\n   */\n   blockCustomCode?: Partial<grapesjs.BlockOptions>;\n\n  /**\n   * Object to extend the default custom code properties.\n   * @example\n   * { name: 'Custom Code', droppable: false, ... }\n   */\n   propsCustomCode?: grapesjs.ComponentDefinition;\n\n  /**\n   * Object to extend the default component's toolbar button for the code. Pass a falsy value to avoid adding the button\n   * @example\n   * { label: '</>', attributes: { title: 'Open custom code' } }\n   */\n   toolbarBtnCustomCode?: Record<string, any>;\n\n   /**\n    * Content to show when the custom code contains `<script>`\n    */\n   placeholderScript?: string;\n\n   /**\n    * Title for the custom code modal\n    * @default 'Insert your code'\n    */\n   modalTitle?: string;\n\n   /**\n    * Additional options for the code viewer.\n    * @example\n    * { theme: 'hopscotch', readOnly: 0 }\n    */\n   codeViewOptions?: Record<string, any>;\n\n   /**\n    * Label for the default save button\n    * @default 'Save'\n    */\n    buttonLabel?: string;\n\n    /**\n     * Object to extend the default custom code command.\n     */\n    commandCustomCode?: Record<string, any>;\n};\n\nconst plugin: grapesjs.Plugin<PluginOptions> = (editor, opts = {}) => {\n  const options: PluginOptions = {\n    blockCustomCode: {},\n    propsCustomCode: {},\n    toolbarBtnCustomCode: {},\n    placeholderScript: `<div style=\"pointer-events: none; padding: 10px;\">\n      <svg viewBox=\"0 0 24 24\" style=\"height: 30px; vertical-align: middle;\">\n        <path d=\"M13 14h-2v-4h2m0 8h-2v-2h2M1 21h22L12 2 1 21z\"></path>\n        </svg>\n      Custom code with <i>&lt;script&gt;</i> can't be rendered on the canvas\n    </div>`,\n    modalTitle: 'Insert your code',\n    codeViewOptions: {},\n    buttonLabel: 'Save',\n    commandCustomCode: {},\n    ...opts\n  };\n\n  // Add components\n  loadComponents(editor, options);\n\n  // Add blocks\n  loadBlocks(editor, options);\n\n  // Add commands\n  loadCommands(editor, options);\n};\n\nexport default plugin;\n","import type grapesjs from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { keyCustomCode, commandNameCustomCode, typeCustomCode } from './utils';\n\nexport default (editor: grapesjs.Editor, opts: PluginOptions = {}) => {\n  const { Components } = editor;\n  const { toolbarBtnCustomCode } = opts;\n  let timedInterval: NodeJS.Timeout;\n\n  Components.addType('script', {\n    view: {\n      onRender() {\n        // @ts-ignore\n        const { model, el } = this;\n        const isCC = model.closestType(typeCustomCode);\n        isCC && (el.innerHTML = '');\n      }\n    },\n  });\n\n  Components.addType(typeCustomCode, {\n    model: {\n      defaults: {\n        name: 'Custom Code',\n        editable: true,\n        components: {\n          tagName: 'span',\n          components: { type: 'textnode', content: 'Insert here your custom code' }\n        },\n        ...opts.propsCustomCode,\n      },\n\n      /**\n       * Initilize the component\n       */\n      init() {\n        // @ts-ignore\n        this.on(`change:${keyCustomCode}`, this.onCustomCodeChange);\n        const initialCode = this.get(keyCustomCode);\n        !this.components().length && this.components(initialCode);\n        const toolbar = this.get('toolbar');\n        const id = 'custom-code';\n\n        // Add the custom code toolbar button if requested and it's not already in\n        // @ts-ignore\n        if (toolbarBtnCustomCode && !toolbar.filter(tlb => tlb.id === id ).length) {\n          // @ts-ignore\n          toolbar.unshift({\n            id,\n            command: commandNameCustomCode,\n            label: `<svg viewBox=\"0 0 24 24\">\n              <path d=\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\"></path>\n            </svg>`,\n            ...toolbarBtnCustomCode\n          });\n        }\n      },\n\n      /**\n       * Callback to launch on keyCustomCode change\n       */\n      // @ts-ignore\n      onCustomCodeChange() {\n        // @ts-ignore\n        this.components(this.get(keyCustomCode));\n      },\n    },\n\n    view: {\n      events: {\n        dblclick: 'onActive',\n      },\n\n      init() {\n        // @ts-ignore\n        this.listenTo(this.model.components(), 'add remove reset', this.onComponentsChange);\n        // @ts-ignore\n        this.onComponentsChange();\n      },\n\n      /**\n       * Things to do once inner components of custom code are changed\n       */\n      // @ts-ignore\n      onComponentsChange() {\n        timedInterval && clearInterval(timedInterval);\n        timedInterval = setTimeout(() => {\n          // @ts-ignore\n          const { model, el } = this;\n          const content = model.get(keyCustomCode) || '';\n          let droppable = true;\n\n          // Avoid rendering codes with scripts\n          if (content.indexOf('<script') >= 0 && opts.placeholderScript) {\n            el.innerHTML = opts.placeholderScript;\n            droppable = false;\n          }\n\n          model.set({ droppable });\n        }, 0);\n      },\n\n      onActive() {\n        // @ts-ignore\n        const { model, em } = this;\n        em.get('Commands').run(commandNameCustomCode, { target: model });\n      },\n    },\n  });\n}\n","import type grapesjs from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { typeCustomCode } from './utils';\n\nexport default (editor: grapesjs.Editor, { blockCustomCode }: PluginOptions = {}) => {\n  const { Blocks } = editor;\n\n  blockCustomCode && Blocks.add(typeCustomCode, {\n    label: 'Custom Code',\n    media: `\n      <svg viewBox=\"0 0 24 24\">\n        <path d=\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\"></path>\n      </svg>\n    `,\n    category: 'Extra',\n    activate: true,\n    select: true,\n    content: { type: typeCustomCode },\n    ...blockCustomCode\n  });\n}\n","import type grapesjs from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { commandNameCustomCode, keyCustomCode } from './utils';\n\nexport default (editor: grapesjs.Editor, opts: PluginOptions = {}) => {\n  const { modalTitle, codeViewOptions, commandCustomCode } = opts;\n\n  const appendToContent = (target: HTMLElement, content: HTMLElement | string) => {\n    if (content instanceof HTMLElement) {\n        target.appendChild(content);\n    } else if (content) {\n        target.insertAdjacentHTML('beforeend', content);\n    }\n  }\n\n  // Add the custom code command\n  editor.Commands.add(commandNameCustomCode, {\n    keyCustomCode,\n\n    run(editor, s, opts = {}) {\n      const target = opts.target || editor.getSelected();\n      // @ts-ignore\n      this.target = target;\n\n      if (target?.get('editable')) {\n        // @ts-ignore\n        this.showCustomCode(target, opts);\n      }\n    },\n\n    stop(editor) {\n      editor.Modal.close();\n    },\n\n    /**\n     * Method which tells how to show the custom code\n     * @param  {Component} target\n     */\n    showCustomCode(target: grapesjs.Component, options: any) {\n      const title = options.title || modalTitle;\n      const code = target.get(keyCustomCode) || '';\n      // @ts-ignore\n      const content = this.getContent();\n      editor.Modal\n        .open({ title, content })\n        .onceClose(() => editor.stopCommand(commandNameCustomCode))\n      // @ts-ignore\n      this.getCodeViewer().setContent(code);\n    },\n\n    /**\n     * Custom pre-content. Can be a simple string or an HTMLElement\n     */\n    getPreContent() {},\n\n    /**\n     * Custom post-content. Can be a simple string or an HTMLElement\n     */\n    getPostContent() {},\n\n    /**\n     * Get all the content for the custom code\n     * @return {HTMLElement}\n     */\n    getContent() {\n      // @ts-ignore\n      const codeViewer = this.getCodeViewer();\n      const content = document.createElement('div');\n      const pfx = editor.getConfig('stylePrefix');\n      content.className = `${pfx}custom-code`;\n      // @ts-ignore\n      appendToContent(content, this.getPreContent());\n      content.appendChild(codeViewer.getElement());\n      // @ts-ignore\n      appendToContent(content, this.getPostContent());\n      // @ts-ignore\n      appendToContent(content, this.getContentActions());\n      codeViewer.refresh();\n      setTimeout(()=> codeViewer.focus(), 0);\n\n      return content;\n    },\n\n    /**\n     * Get the actions content. Can be a simple string or an HTMLElement\n     * @return {HTMLElement|String}\n     */\n    getContentActions() {\n      const btn = document.createElement('button');\n      btn.setAttribute('type', 'button');\n      const pfx = editor.getConfig('stylePrefix');\n      btn.innerHTML = opts.buttonLabel!;\n      btn.className = `${pfx}btn-prim ${pfx}btn-import__custom-code`;\n      // @ts-ignore\n      btn.onclick = () => this.handleSave();\n\n      return btn;\n    },\n\n    /**\n     * Handle the main save task\n     */\n    handleSave() {\n      // @ts-ignore\n      const { target } = this;\n      // @ts-ignore\n      const code = this.getCodeViewer().getContent();\n      target.set(keyCustomCode, code);\n      editor.Modal.close();\n    },\n\n    /**\n     * Return the code viewer instance\n     * @return {CodeViewer}\n     */\n    getCodeViewer() {\n      // @ts-ignore\n      if (!this.codeViewer) {\n        // @ts-ignore\n        this.codeViewer = editor.CodeManager.createViewer({\n          codeName: 'htmlmixed',\n          theme: 'hopscotch',\n          readOnly: 0,\n          ...codeViewOptions,\n        });\n      }\n      // @ts-ignore\n      return this.codeViewer;\n    },\n\n    ...commandCustomCode,\n  });\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}